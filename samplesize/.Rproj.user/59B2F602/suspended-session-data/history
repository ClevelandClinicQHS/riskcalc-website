new_project(title = "Preoperative nomogram oral cavity cancer", authors = 0)
?new_project
Sys.getenv("HOME")
Sys.getenv("PROJECTS_FOLDER_PATH")
setup_projects(path = Sys.getenv("PROJECTS_FOLDER_PATH"))
new_project(title = "Preoperative nomogram oral cavity cancer", authors = 0)
new_project(title = "Preoperative nomogram oral cavity cancer", authors = 1)
setup_projects(path = Sys.getenv("PROJECTS_FOLDER_PATH"), make_directories = T)
new_project()
setup_projects(path = Sys.getenv("PROJECTS_FOLDER_PATH"), make_directories = T, overwrite = T)
setup_projects(path = "H:/Project", overwrite = T)
new_project(title = "Preoperative nomogram oral cavity cancer", authors = 1)
delete_project(14)
new_project(title = "Preoperative nomogram oral cavity cancer", authors = 1, id=9)
projects()
delete_project(9:13)
delete_project(9)
delete_project(10)
delete_project(11)
delete_project(12)
delete_project(13)
new_project(title = "Preoperative nomogram oral cavity cancer", authors = 1, id=9)
(0.8*0.5-0.2*sqrt(0.8*0.2*0.5*0.5))/(0.2*0.5-0.2*sqrt(0.8*0.2*0.5*0.5))
6/(6+1)
6.5*6.5-12
sqrt(30.25)
0.5*0.8-0.1*sqrt(0.8*0.2)
(0.5*0.8-0.1*sqrt(0.8*0.2)) / (0.5*0.2-0.1*sqrt(0.8*0.2))
a=2*6*0.5-2*6*0.25+2*36*0.25-0.04*25*0.25
b=1-0.5+6*0.5+36*25*0.25
-a+sqrt(a^2-4*b*36*0.25)
a
b
4*b*36*0.25
20.75*20.75
b=1-0.5+6*0.5+0.2*0.2*25*0.25
b
-a+sqrt(a^2-4*b*36*0.25)
(-a+sqrt(a^2-4*b*36*0.25))/2*b
b=(1-0.5+6*0.5)^2+0.2*0.2*25*0.25
b
4*12.5*36*0.25
20.25*20.25-450
(-a+sqrt(a^2-4*b*36*0.25))/2*b
a
20.75*20.75-450
-2*6*0.5*(0.5+6*0.5)-36*25*0.25
-2*6*0.5*(0.5+6*0.5)-0.04*25*0.25
21.25*2
21.25*21.25
sqrt(21.25*21.25-450)+21.25
22.5/(2*12.5)
22.5/0.8
a=(1-0.5+6*0.5)^2+0.04*25*0.25
a
b
b=-2*6*0.5-2*6*0.25+2*36*0.25-0.04*25*0.25
b
8.75*8.75-4*12.5*36*0.25
b=-2*6*0.5+2*6*0.25-2*36*0.25-0.04*25*0.25
b
21.25*21.25-4*a*36*0.25
sqrt(21.25*21.25-4*a*36*0.25)
-b+1.25
22.5/(2*a)
(0.9*0.5-0.2*sqrt(0.9*0.1*0.25))/(0.1*0.5-0.2*sqrt(0.9*0.1*0.25))
a=3.5*3.5+0.04*25*0.25
a
25*8
-6*(0.5+3)
0.04*25*0.25
b=-21.25
21.25*21.25-4*12.5*36*0.25
21.25+1.25
22.5/2/12.5
21.25-1.25
20/2/12.5
control=0.5; OR=6; rho=0.2
a = (1-control+OR*control)^2+rho^2*(1-OR)^2*control*(1-control)
b = -2*OR*control*(1-control+OR*control)-rho^2*(1-OR)^2*control*(1-control)
c = OR^2 * control^2
case1 = (-b + sqrt(b^2-4*a*c)) / (2*a)
case2 = (-b - sqrt(b^2-4*a*c)) / (2*a)
a
case1
case2
err1 = (case1*(1-control)-rho*sqrt(case1*control*(1-case1)*(1-control)))/(control*(1-case1)-rho*sqrt(case1*control*(1-case1)*(1-control)))-OR
err2 = (case1*(1-control)-rho*sqrt(case2*control*(1-case2)*(1-control)))/(control*(1-case2)-rho*sqrt(case2*control*(1-case2)*(1-control)))-OR
err1
err2
(case1*(1-control)-rho*sqrt(case1*control*(1-case1)*(1-control)))/(control*(1-case1)-rho*sqrt(case1*control*(1-case1)*(1-control)))
(case1*(1-control)-rho*sqrt(case2*control*(1-case2)*(1-control)))/(control*(1-case2)-rho*sqrt(case2*control*(1-case2)*(1-control)))
err1 = (case1*(1-control)-rho*sqrt(case1*control*(1-case1)*(1-control)))/(control*(1-case1)-rho*sqrt(case1*control*(1-case1)*(1-control)))-OR
err2 = (case2*(1-control)-rho*sqrt(case2*control*(1-case2)*(1-control)))/(control*(1-case2)-rho*sqrt(case2*control*(1-case2)*(1-control)))-OR
err1
err2
10^-5
exp(-10)
exp(-1)
exp(-2)
1-exp(-1)
1-exp(-2)
log(10)
ln(10)
?log
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
if (design == "non-inferiority") {
z.beta = qnorm(1 - beta, mean = 0, sd = 1)
d_c = (r + 1) / r * ((z.alpha + z.beta) / (log_hr + log_delta)) ^ 2
} else if (design == "equivalence") {
z.beta = qnorm(1 - beta, mean = 0, sd = 1)
d_c = (r + 1) / r * ((z.alpha + z.beta) / (abs(log_hr) - log_delta)) ^ 2
} else if (design == "superiority") {
z.beta = qnorm(1 - beta, mean = 0, sd = 1)
d_c = (r + 1) / r * ((z.alpha + z.beta) / (log_hr - log_delta)) ^ 2
}
runApp()
runApp()
runApp()
runApp()
# r = n_t/n_c
if (!is.na(pi_treat)) {
pi_treat = 1 - (1-pi_control) ^ HR
} else if (!is.na(pi_control)) {
pi_control = 1 - (1-pi_treat) ^ (1/HR)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
d_t = d_c * r
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
n_c = ceiling(d_c / pi_control)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("kableExtra'")
install.packages("kableExtra")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
n_treat
runApp()
runApp()
source("samplesize.R", local = T)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
res
runApp()
runApp()
runApp()
0.4*0.4/0.36
0.36/0.16
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cross_sectional = function(p1, p2, variance, r=1, alpha, power, two.side=T, design = c("continuous", "proportion"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
c(paste(ifelse(twoside, "2-side", "1-side"), "significance level"), "p", "d", "Result", "Total sample size")
twoside
input$checkbox9
input$`checkbox-879-559`
runApp()
input$checkbox9
runApp()
runApp()
runApp()
input$checkbox9
input$`checkbox9-927-452`
runApp()
runApp()
runApp()
runApp()
input$checkbox9
runApp()
input$checkbox9
is.null(input$checkbox9)
ifelse(!is.null(input$checkbox9)&input$checkbox9=="twoside", T, F)
ifelse(is.null(input$checkbox9), T, F)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
?reactiveVal
?reactiveValues
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
