runApp()
d = data("mtcars")
d = data("mtcars") %>% data.frame()
d
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
predict(
CVD_surgery_rf_model,
dat
)
predict(
CVD_surgery_rf_model
)
predict.rfsrc(CVD_surgery_rf_model)
CVD_surgery_rf_model
?predict.rfsrc
runApp()
eGFR=81,
HX_CAD="No",
HX_CHF="No",
HX_COPD="No", HX_CVD
eGFR=81,
HX_CAD="No",
HX_CHF="No",
HX_COPD="No",
HX_CVD="No",
HX_DiabeticNeuropathy="No",
HX_Dialysis = "No",
HX_Dyslipidemia = "No",
HX_Hypertension = "No",
HX_Nephropathy = "No",
HX_PAD = "No",
ACEInhibitorsARBS = "No",
Aspirin = "No",
CholesterolLowering = "No",
Insulin = "No",
NonInsulinDiabetesMedication = "No",
OtherAntihypertensives = "No",
Warfarin = "No",
Treatment="Surgical") %>%
mutate(Treatment <- factor(Treatment, levels = c("Surgical", "Nonsurgical")),
Gender = factor(Gender, levels = c("Male", "Female")),
Race = factor(Race, levels = c("White", "Black", "Other")),
SmokingStatus = factor(SmokingStatus, levels = c("Never", "Quit", "Current"))) %>% str()
data.table(Age=60,
Gender="Male",
Race="White",
BMI=30,
SmokingStatus="Never",
A1C=7.1,
Diastolic=75,
Systolic=135,
Triglyceride =150,
eGFR=81,
HX_CAD="No",
HX_CHF="No",
HX_COPD="No",
HX_CVD="No",
HX_DiabeticNeuropathy="No",
HX_Dialysis = "No",
HX_Dyslipidemia = "No",
HX_Hypertension = "No",
HX_Nephropathy = "No",
HX_PAD = "No",
ACEInhibitorsARBS = "No",
Aspirin = "No",
CholesterolLowering = "No",
Insulin = "No",
NonInsulinDiabetesMedication = "No",
OtherAntihypertensives = "No",
Warfarin = "No",
Treatment="Surgical") %>%
mutate(Treatment <- factor(Treatment, levels = c("Surgical", "Nonsurgical")),
Gender = factor(Gender, levels = c("Male", "Female")),
Race = factor(Race, levels = c("White", "Black", "Other")),
SmokingStatus = factor(SmokingStatus, levels = c("Never", "Quit", "Current"))) %>% str()
data.frame(Age=60,
Gender="Male",
Race="White",
BMI=30,
SmokingStatus="Never",
A1C=7.1,
Diastolic=75,
Systolic=135,
Triglyceride =150,
eGFR=81,
HX_CAD="No",
HX_CHF="No",
HX_COPD="No",
HX_CVD="No",
HX_DiabeticNeuropathy="No",
HX_Dialysis = "No",
HX_Dyslipidemia = "No",
HX_Hypertension = "No",
HX_Nephropathy = "No",
HX_PAD = "No",
ACEInhibitorsARBS = "No",
Aspirin = "No",
CholesterolLowering = "No",
Insulin = "No",
NonInsulinDiabetesMedication = "No",
OtherAntihypertensives = "No",
Warfarin = "No",
Treatment="Surgical") %>%
mutate(Treatment <- factor(Treatment, levels = c("Surgical", "Nonsurgical")),
Gender = factor(Gender, levels = c("Male", "Female")),
Race = factor(Race, levels = c("White", "Black", "Other")),
SmokingStatus = factor(SmokingStatus, levels = c("Never", "Quit", "Current"))) %>% str()
data.frame(Age=60,
Gender="Male",
Race="White",
BMI=30,
SmokingStatus="Never",
A1C=7.1,
Diastolic=75,
Systolic=135,
Triglyceride =150,
eGFR=81,
HX_CAD="No",
HX_CHF="No",
HX_COPD="No",
HX_CVD="No",
HX_DiabeticNeuropathy="No",
HX_Dialysis = "No",
HX_Dyslipidemia = "No",
HX_Hypertension = "No",
HX_Nephropathy = "No",
HX_PAD = "No",
ACEInhibitorsARBS = "No",
Aspirin = "No",
CholesterolLowering = "No",
Insulin = "No",
NonInsulinDiabetesMedication = "No",
OtherAntihypertensives = "No",
Warfarin = "No",
Treatment="Surgical") %>%
mutate(Treatment <- factor(Treatment, levels = c("Surgical", "Nonsurgical")),
Gender = factor(Gender, levels = c("Male", "Female")),
Race = factor(Race, levels = c("White", "Black", "Other")),
SmokingStatus = factor(SmokingStatus, levels = c("Never", "Quit", "Current"))) %>%
mutate_if(~is.factor(.)&length(levels(.))==1, factor(., levels =c("No","Yes")))
data.frame(Age=60,
Gender="Male",
Race="White",
BMI=30,
SmokingStatus="Never",
A1C=7.1,
Diastolic=75,
Systolic=135,
Triglyceride =150,
eGFR=81,
HX_CAD="No",
HX_CHF="No",
HX_COPD="No",
HX_CVD="No",
HX_DiabeticNeuropathy="No",
HX_Dialysis = "No",
HX_Dyslipidemia = "No",
HX_Hypertension = "No",
HX_Nephropathy = "No",
HX_PAD = "No",
ACEInhibitorsARBS = "No",
Aspirin = "No",
CholesterolLowering = "No",
Insulin = "No",
NonInsulinDiabetesMedication = "No",
OtherAntihypertensives = "No",
Warfarin = "No",
Treatment="Surgical") %>%
mutate(Treatment <- factor(Treatment, levels = c("Surgical", "Nonsurgical")),
Gender = factor(Gender, levels = c("Male", "Female")),
Race = factor(Race, levels = c("White", "Black", "Other")),
SmokingStatus = factor(SmokingStatus, levels = c("Never", "Quit", "Current"))) %>%
mutate_if(~is.factor(.)&length(levels(.))==1, ~factor(., levels =c("No","Yes")))
data.frame(Age=60,
Gender="Male",
Race="White",
BMI=30,
SmokingStatus="Never",
A1C=7.1,
Diastolic=75,
Systolic=135,
Triglyceride =150,
eGFR=81,
HX_CAD="No",
HX_CHF="No",
HX_COPD="No",
HX_CVD="No",
HX_DiabeticNeuropathy="No",
HX_Dialysis = "No",
HX_Dyslipidemia = "No",
HX_Hypertension = "No",
HX_Nephropathy = "No",
HX_PAD = "No",
ACEInhibitorsARBS = "No",
Aspirin = "No",
CholesterolLowering = "No",
Insulin = "No",
NonInsulinDiabetesMedication = "No",
OtherAntihypertensives = "No",
Warfarin = "No",
Treatment="Surgical") %>%
mutate(Treatment = factor(Treatment, levels = c("Surgical", "Nonsurgical")),
Gender = factor(Gender, levels = c("Male", "Female")),
Race = factor(Race, levels = c("White", "Black", "Other")),
SmokingStatus = factor(SmokingStatus, levels = c("Never", "Quit", "Current"))) %>%
mutate_if(~is.factor(.)&length(levels(.))==1, ~factor(., levels =c("No","Yes")))
dat = data.frame(Age=60,
Gender="Male",
Race="White",
BMI=30,
SmokingStatus="Never",
A1C=7.1,
Diastolic=75,
Systolic=135,
Triglyceride =150,
eGFR=81,
HX_CAD="No",
HX_CHF="No",
HX_COPD="No",
HX_CVD="No",
HX_DiabeticNeuropathy="No",
HX_Dialysis = "No",
HX_Dyslipidemia = "No",
HX_Hypertension = "No",
HX_Nephropathy = "No",
HX_PAD = "No",
ACEInhibitorsARBS = "No",
Aspirin = "No",
CholesterolLowering = "No",
Insulin = "No",
NonInsulinDiabetesMedication = "No",
OtherAntihypertensives = "No",
Warfarin = "No",
Treatment="Surgical") %>%
mutate(Treatment = factor(Treatment, levels = c("Surgical", "Nonsurgical")),
Gender = factor(Gender, levels = c("Male", "Female")),
Race = factor(Race, levels = c("White", "Black", "Other")),
SmokingStatus = factor(SmokingStatus, levels = c("Never", "Quit", "Current"))) %>%
mutate_if(~is.factor(.)&length(levels(.))==1, ~factor(., levels =c("No","Yes")))
predict(CVD_surgery_rf_model, newdata = dat)
CVD_surgery_rf_model$xvar.names
CVD_surgery_rf_model$xvar.names %in% names(dat)
debugonce(predict.rfsrc(CVD_surgery_rf_model, newdata = dat))
debugonce(predict.rfsrc
)
predict(CVD_surgery_rf_model, newdata = dat)
predict(CVD_surgery_rf_model, newdata = dat ,do.trace = T)
debugonece(generic.predict.rfsrc)
debugonce(generic.predict.rfsrc)
debugonce(randomForestSRC::generic.predict.rfsrc)
debugonce(randomForestSRC:::generic.predict.rfsrc)
predict(CVD_surgery_rf_model, newdata = dat ,outcome = 'test')
generic.predict.rfsrc(object=CVD_surgery_rf_model,
newdata=dat,
ensemble = NULL,
m.target = NULL,
importance = FALSE,
get.tree = NULL,
block.size = 10,
na.action = 'na.omit',
outcome = "test",
proximity = FALSE,
forest.wt = FALSE,
ptn.count = 0,
distance = FALSE,
var.used = FALSE,
split.depth = FALSE,
seed = NULL,
do.trace = FALSE,
membership = FALSE,
statistics = FALSE)
randomForestSRC:::generic.predict.rfsrc(object=CVD_surgery_rf_model,
newdata=dat,
ensemble = NULL,
m.target = NULL,
importance = FALSE,
get.tree = NULL,
block.size = 10,
na.action = 'na.omit',
outcome = "test",
proximity = FALSE,
forest.wt = FALSE,
ptn.count = 0,
distance = FALSE,
var.used = FALSE,
split.depth = FALSE,
seed = NULL,
do.trace = FALSE,
membership = FALSE,
statistics = FALSE)
debugonce(randomForestSRC::generic.predict.rfsrc)
debugonce(randomForestSRC:::generic.predict.rfsrc)
randomForestSRC:::generic.predict.rfsrc(object=CVD_surgery_rf_model,
newdata=dat,
ensemble = NULL,
m.target = NULL,
importance = FALSE,
get.tree = NULL,
block.size = 10,
na.action = 'na.omit',
outcome = "test",
proximity = FALSE,
forest.wt = FALSE,
ptn.count = 0,
distance = FALSE,
var.used = FALSE,
split.depth = FALSE,
seed = NULL,
do.trace = FALSE,
membership = FALSE,
statistics = FALSE)
gk.quantile
randomForestSRC:::generic.predict.rfsrc(object=CVD_surgery_rf_model,
newdata=dat,
ensemble = NULL,
m.target = NULL,
importance = FALSE,
get.tree = NULL,
block.size = 10,
na.action = 'na.omit',
outcome = "test",
proximity = FALSE,
forest.wt = FALSE,
ptn.count = 0,
distance = FALSE,
var.used = FALSE,
split.depth = FALSE,
seed = NULL,
do.trace = FALSE,
membership = FALSE,
statistics = FALSE,
gk.quantile=FALSE)
debugonce(randomForestSRC:::generic.predict.rfsrc)
randomForestSRC:::generic.predict.rfsrc(object=CVD_surgery_rf_model,
newdata=dat,
ensemble = NULL,
m.target = NULL,
importance = FALSE,
get.tree = NULL,
block.size = 10,
na.action = 'na.omit',
outcome = "test",
proximity = FALSE,
forest.wt = FALSE,
ptn.count = 0,
distance = FALSE,
var.used = FALSE,
split.depth = FALSE,
seed = NULL,
do.trace = FALSE,
membership = FALSE,
statistics = FALSE,
gk.quantile=FALSE)
object$gk.quantile
gk.quantile
debugonce(randomForestSRC:::generic.predict.rfsrc)
randomForestSRC:::generic.predict.rfsrc(object=CVD_surgery_rf_model,
newdata=dat,
ensemble = NULL,
m.target = NULL,
importance = FALSE,
get.tree = NULL,
block.size = 10,
na.action = 'na.omit',
outcome = "test",
proximity = FALSE,
forest.wt = FALSE,
ptn.count = 0,
distance = FALSE,
var.used = FALSE,
split.depth = FALSE,
seed = NULL,
do.trace = FALSE,
membership = FALSE,
statistics = FALSE,
gk.quantile=FALSE)
prob
object$prob
CVD_surgery_rf_model$prob
CVD_surgery_rf_model$prob.epsilon
CVD_surgery_rf_model$quantile.regr
CVD_surgery_rf_model$splitrule
CVD_surgery_rf_model$prob.epsilon=FALSE
CVD_surgery_rf_model$prob.epsilon=NULL
CVD_surgery_rf_model$gk.quantile
CVD_surgery_rf_model$quantile.regr=FALSE
predict(CVD_surgery_rf_model, newdata = dat ,outcome = 'test')
predict(CVD_surgery_rf_model, newdata = dat ,outcome = 'train')
predict(CVD_surgery_rf_model, newdata = dat)
debugonce(randomForestSRC:::generic.predict.rfsrc)
randomForestSRC:::generic.predict.rfsrc(object=CVD_surgery_rf_model,
newdata=dat,
ensemble = NULL,
m.target = NULL,
importance = FALSE,
get.tree = NULL,
block.size = 10,
na.action = 'na.omit',
outcome = "test",
proximity = FALSE,
forest.wt = FALSE,
ptn.count = 0,
distance = FALSE,
var.used = FALSE,
split.depth = FALSE,
seed = NULL,
do.trace = FALSE,
membership = FALSE,
statistics = FALSE,
gk.quantile=FALSE)
gk.quantile
object$quantile.regr
splitrule
randomForestSRC:::generic.predict.rfsrc(object=CVD_surgery_rf_model,
newdata=dat,
ensemble = NULL,
m.target = NULL,
importance = FALSE,
get.tree = NULL,
block.size = 10,
na.action = 'na.omit',
outcome = "train",
proximity = FALSE,
forest.wt = FALSE,
ptn.count = 0,
distance = FALSE,
var.used = FALSE,
split.depth = FALSE,
seed = NULL,
do.trace = FALSE,
membership = FALSE,
statistics = FALSE,
gk.quantile=FALSE)
debugonce(randomForestSRC:::generic.predict.rfsrc)
randomForestSRC:::generic.predict.rfsrc(object=CVD_surgery_rf_model,
newdata=dat,
ensemble = NULL,
m.target = NULL,
importance = FALSE,
get.tree = NULL,
block.size = 10,
na.action = 'na.omit',
outcome = "train",
proximity = FALSE,
forest.wt = FALSE,
ptn.count = 0,
distance = FALSE,
var.used = FALSE,
split.depth = FALSE,
seed = NULL,
do.trace = FALSE,
membership = FALSE,
statistics = FALSE,
gk.quantile=FALSE)
n
n
n
n
n
n
n
n
n
n
n
CVD_surgery_rf_model$sampsize
?dataTableOutput
runApp()
detach("package:randomForestSRC", unload = TRUE)
remove.packages("randomForestSRC")
?install.packages
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
