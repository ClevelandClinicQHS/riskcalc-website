library(shiny)
library(yonder)
library(shinyjs)
library(dplyr)
library(tidyr)
library(kableExtra)
library(ggradar)
source("./model.R")

medianincome = read.csv(file = "medianincome.csv", header = TRUE, colClasses = c("character", "numeric"))
adi = read.csv(file="adi.csv", header = T, colClasses = c("character", "numeric"))


ui <- container(
    shinyjs::useShinyjs(),
    h1("Decision-making tool of adding a second-line therapy to metformin for a patient with Type 2 DM") %>% margin(top=3, bottom=3),
    columns(
        column(
            width = c(md=4),
            card(
                header=navInput(
                    id = "tabs",
                    choices = c("Demographics", "Labs", "Medication history", "Medical history"),
                    values = c("Demographics", "Labs", "Medications", "Medical history"),
                    appearance = "pills"
                ) %>% font(align="center"),
                navContent(
                    navPane(
                        id="Demographics",
                        formGroup(label="Age (years)", textInput(id='Age', placeholder = "18-90")),
                        formGroup(label="Gender", selectInput(id="Gender", choices = c("Male", "Female"))),
                        formGroup(label="Race", selectInput(id='Race', choices = c("Caucasian", "Black", "Asian", "Other"))),
                        formGroup(label="Marital", selectInput(id='Marital', choices = c("Unmarried", "Divorced/Separated/Widow", "Married or domestic partner", "Other/Unknown"))),
                        formGroup(label="Insurance", selectInput(id='FinancialClass', c("Commercial", "Medicaid", "Medicare", "Other"))),
                        formGroup(label="ZIP code", textInput(id="zip", placeholder = "5 digits zip code")),
                        formGroup(label="Smoking history", selectInput(id='SmokingHistory', c("Never", "Current smoker", "Former smoker")))
                    ),
                    navPane(
                        id="Labs",
                        formGroup(label="HbA1c(%)", textInput(id='A1c', placeholder = "4-20")),
                        h6("Cholesterol levels (mg/dL)") %>% margin(bottom=1),
                        formRow(
                            formGroup(width=c(sm=6), label="LDL", textInput(id='ldl', placeholder = "0 - 400")),
                            formGroup(width=c(sm=6), label="HDL", textInput(id='hdl', placeholder = "0 - 800"))
                        ),
                        h6("Blood pressure (mm Hg)") %>% margin(bottom=1),
                        formRow(
                            formGroup(width=c(sm=6), label="Systolic", textInput(id='Systolic', placeholder = "70 - 240")),
                            formGroup(width=c(sm=6), label="Diastolic", textInput(id='Diastolic', placeholder = "60 - 140"))
                        ),
                        h6("Calculate Body Mass Index (BMI)") %>% margin(bottom=1),
                        radiobarInput(id="bmi_choice", choices =  c("English", "Metric")) %>% margin(top=2, bottom=2) %>% background("green"),
                        div(
                            id="bmi_eng", show=T,
                            p("Height") %>% margin(top=1, bottom=1),
                            formRow(
                                formGroup(width=c(sm=6), label=NULL, inline=T, groupTextInput(id='feet', right="feet")) %>% margin(0) %>% padding(right=0),
                                formGroup(width=c(sm=6), label=NULL, inline=T, groupTextInput(id='inch', right="inches")) %>% margin(0) %>% padding(left=0)
                            ) %>% margin(top=-3, bottom=3),
                            formGroup(label="Weight", groupTextInput(id='lb', right="pounds"))
                        ),
                        div(
                            id="bmi_metric", show=T,
                            formGroup(label="Height", groupTextInput(id='meter', right="meters")),
                            formGroup(label="Weight", groupTextInput(id='kg', right="kilograms"))
                        )
                    ),
                    navPane(
                        id="Medications",
                        formGroup(label="Minimum known time on Metformin (years)", textInput(id='TimeBetweenMetforminToSecond', placeholder = "0 - 10")),
                        formGroup(label="Statin", selectInput(id="Statin", choices = c("No", "Yes"))),
                        formGroup(label="Anti-Hypertension Medication during prior 1 year", 
                                  div(id='HTN.Med',
                                      shiny::selectizeInput(inputId="AntiHTN", label="", multiple=TRUE,selected = NULL,
                                                        options = list('plugins' = list('remove_button'),'create' = TRUE,'persist' = FALSE),
                                                        choices = c("Calcium Channel Blockers", "Methyldopa", "Beta Blockers", "Diuretics", "Clonidine", "AlphaBlockers", "Ace Inhibitors", "Mineralcorticoid Receptor Antagonists", "A2As", "ARBs"))
                                  ) %>% margin(top=-4))
                    ),
                    navPane(
                        id="Medical history",
                        formGroup(label="Heart disease", selectInput(id="HeartDisease", choices = c("No", "Yes"))),
                        formGroup(label="Heart failure", selectInput(id="HF", choices = c("No", "Yes"))),
                        formGroup(label="Dyslipidemia", selectInput(id="Dyslipidemia", choices = c("No", "Yes"))),
                        formGroup(label="Stroke", selectInput(id="Hx.stroke", choices = c("No", "Yes"))),
                        formGroup(label="Myocardial infarction", selectInput(id="Hx.MI", choices = c("No", "Yes"))),
                        formGroup(label="Hypertension", selectInput(id="Hx.HTN", choices = c("No", "Yes"))),
                        formGroup(label="Renal Failure", selectInput(id="Hx.RenalFailure", choices = c("No", "Yes")))
                    )
                )
            )
        ),
        column(
            width = c(md = 8),
            actionButton(inputId='run', label="Run Calculator") %>% background("blue") %>% font(weight="bold", color = "white") %>% padding(top=2, bottom=2, left=3, right=3),
            card(
                header=p("Predicted 5-year risk of outcomes") %>% font(weight = "bold", align="center") %>% margin(top=0, bottom=0),
                shinyjs::hidden(div(id='running', img("busy.gif")) %>% font(align="center")),
                div(id='o', uiOutput("outcome"), plotOutput("plot"))
            ) %>% margin(top = 3, bottom = 3),
            card(
                header = p("Disclaimer") %>% font(weight = "bold", align="center") %>% margin(top=0, bottom=0),
                p("No Medical Advice. ALTHOUGH SOME CONTENT MAY BE PROVIDED BY INDIVIDUALS IN THE MEDICAL PROFESSION, YOU ACKNOWLEDGE THAT PROVISION OF SUCH CONTENT DOES NOT CREATE A MEDICAL PROFESSIONAL-PATIENT RELATIONSHIP AND DOES NOT CONSTITUTE AN OPINION, MEDICAL ADVICE, PROFESSIONAL DIAGNOSIS, SERVICE OR TREATMENT OF ANY CONDITION. Access to general information is provided for educational purposes only, through this site and links to other sites. Content is not recommended or endorsed by any doctor or healthcare provider. The information and Content provided are not substitutes for medical or professional care, and you should not use the information in place of a visit, call, consultation or the advice of your physician or other healthcare provider. You are liable or responsible for any advice, course of treatment, diagnosis or any other information, services or product obtained through this site.")
            ) %>% margin(top = 3, bottom = 3)
        )
    )
)

# Define server logic required to draw a histogram
server <- function(input, output, session) {
    # left side nav pane toggle
    observeEvent(input$tabs, {
        showNavPane(input$tabs)
    })
    
    # bmi metric radiobutton
    observeEvent(input$bmi_choice, {
        if (input$bmi_choice == "English"){
            shinyjs::show("bmi_eng")
            shinyjs::hide("bmi_metric")
        } else if (input$bmi_choice == "Metric") {
            shinyjs::hide("bmi_eng")
            shinyjs::show("bmi_metric")
        }
        
    })
    
    # reactiveValues with output table 
    v = reactiveValues(res = NULL, rank=NULL, run = 0)
    
    # hide outcome table if input changes
    observe({
        lapply(names(input)[names(input)!="run"], function(x) {
            observeEvent(input[[x]], {
                v$res=NULL
                v$rank = NULL
                v$run=0
            })
        })
    })
    observeEvent(input$run, {
        v$run=1
    })
    
    # calculate bmi
    bmi = reactive({
        if (input$bmi_choice == "English"){
            lb = as.numeric(regmatches(input$lb, regexpr("\\d+", input$lb)))
            feet = as.numeric(regmatches(input$feet, regexpr("\\d+", input$feet)))
            inch = as.numeric(regmatches(input$inch, regexpr("\\d+", input$inch)))

            feet = ifelse(length(is.na(feet))==0, 0, feet)
            inches = feet * 12 + ifelse(length(is.na(inch))==0, 0, inch)
            BMI = lb / (inches * inches) * 703
        } else if (input$bmi_choice == "Metric") {
            kg = as.numeric(regmatches(input$kg, regexpr("\\d+", input$kg)))
            meter = as.numeric(regmatches(input$meter, regexpr("\\d+", input$meter)))
            
            BMI = kg / (meter * meter)
        }
        validate(
            need(
                BMI > 10 & BMI < 60,
                paste("BMI must be between 0 and 60, current BMI is ", BMI)
            )
        )
        BMI
    })
    
    # get input data
    pred_data = reactive({
        validate(
            need(
                as.numeric(input$Age) >= 18 & as.numeric(input$Age) <= 90,
                "Age must be between 18 and 90 years."
            ),
            need(
                nchar(input$zip) == 5 & !is.na(as.numeric(input$zip)),
                "Zip must be a 5-digits number."
            ),
            need(
                input$zip %in% adi$ZIP & input$zip %in% medianincome$ZIP,
                "Zip cannot be found from the 2013-2017 5-year American Community Survey (ACS)."
            ),
            need(
                as.numeric(input$A1c) >= 4 & as.numeric(input$A1c) <= 20,
                "HbA1c must be between 4% and 20%"
            ),
            need(
                as.numeric(input$ldl) >= 0 & as.numeric(input$ldl) <= 400,
                "LDL must be between 0 and 400."
            ),
            need(
                as.numeric(input$hdl) >= 0 & as.numeric(input$hdl) <= 800,
                "HDL must be between 0 and 800."
            ),
            need(
                as.numeric(input$Systolic) >= 70 & as.numeric(input$Systolic) <= 240,
                "Systolic must be between 70 and 240."
            ),
            need(
                as.numeric(input$Diastolic) >= 60 & as.numeric(input$Diastolic) <= 140,
                "Diastolic must be between 60 and 140."
            ),
            need(
                as.numeric(input$TimeBetweenMetforminToSecond) >= 0 & as.numeric(input$TimeBetweenMetforminToSecond) <= 10,
                "Time from the initial Metformin must be between 0 and 10 years."
            )
        )
        if (input$bmi_choice == "English"){
            validate(
                need(
                    input$lb!="pounds",
                    "Weight is empty."
                ),
                need(
                    input$feet!="feet"|input$inch!="inches",
                    "Height is empty"
                )
            )
        } else {
            validate(
                need(
                    input$kg!="kilograms",
                    "Weight is empty."
                ),
                need(
                    input$meter!="meters",
                    "Height is empty"
                )
            )
        }
        Hx.HTN.Med = ifelse(is.null(input$AntiHTN), 0, length(input$AntiHTN))
        temp_data = data.frame(
            Age = as.numeric(input$Age),
            Gender = input$Gender,
            Race = input$Race,
            Marital = input$Marital,
            FinancialClass = input$FinancialClass,
            SmokingHistory = input$SmokingHistory,
            A1c = as.numeric(input$A1c),
            LDL = as.numeric(input$ldl),
            HDL = as.numeric(input$hdl),
            Systolic = as.numeric(input$Systolic),
            Diastolic = as.numeric(input$Diastolic),
            TimeBetweenMetforminToSecond = as.numeric(input$TimeBetweenMetforminToSecond),
            Statin = ifelse(input$Statin=="Yes", 1, 0),
            HeartDisease = ifelse(input$HeartDisease=="Yes", 1, 0),
            HF = ifelse(input$HF=="Yes", 1, 0),
            Dyslipidemia = ifelse(input$Dyslipidemia=="Yes", 1, 0),
            Hx.Stroke = ifelse(input$Hx.stroke=="Yes", 1, 0),
            Hx.MI = ifelse(input$Hx.MI=="Yes", 1, 0),
            Hx.HTN = ifelse(input$Hx.HTN=="Yes"|Hx.HTN.Med>0, 1, 0),
            Hx.HTN.Med = Hx.HTN.Med,
            Hx.RenalFailure = ifelse(input$Hx.RenalFailure=="Yes", 1, 0),
            BMI = bmi(),
            MedianIncome = medianincome[medianincome$ZIP==input$zip,]$MedianIncome,
            ADI = adi[adi$ZIP==input$zip,]$ADI
        )
        temp_data
    })
    
    # calculate result
    output$outcome = renderText({
        if(v$run==1) {
            pred_data = pred_data()
            shinyjs::show("running")
            predicted_death = death(pred_data)
            predicted_stroke = stroke(pred_data)
            predicted_mi = mi(pred_data)
            predicted_htn = htn(pred_data)
            predicted_rf = rf(pred_data)
            output_data = data.frame(
                drug = c("DPP4","GLP1","SGLT2","SFU","TZD","Insulin"),
                death = c(as.character(predicted_death$df$dpp4),as.character(predicted_death$df$glp1),as.character(predicted_death$df$sglt2),as.character(predicted_death$df$sulf),as.character(predicted_death$df$thia),as.character(predicted_death$df$insulin)),
                #rank_death = c(predicted_death$rank_df$dpp4, predicted_death$rank_df$glp1, predicted_death$rank_df$sglt2,predicted_death$rank_df$sulf,predicted_death$rank_df$thia,predicted_death$rank_df$insulin),
                order_death = c(predicted_death$order_df$dpp4, predicted_death$order_df$glp1, predicted_death$order_df$sglt2,predicted_death$order_df$sulf,predicted_death$order_df$thia,predicted_death$order_df$insulin),
                stroke = c(as.character(predicted_stroke$df$dpp4),as.character(predicted_stroke$df$glp1),as.character(predicted_stroke$df$sglt2),as.character(predicted_stroke$df$sulf),as.character(predicted_stroke$df$thia),as.character(predicted_stroke$df$insulin)),
                #rank_stroke = c(predicted_stroke$rank_df$dpp4, predicted_stroke$rank_df$glp1, predicted_stroke$rank_df$sglt2,predicted_stroke$rank_df$sulf,predicted_stroke$rank_df$thia,predicted_stroke$rank_df$insulin),
                order_stroke = c(predicted_stroke$order_df$dpp4, predicted_stroke$order_df$glp1, predicted_stroke$order_df$sglt2,predicted_stroke$order_df$sulf,predicted_stroke$order_df$thia,predicted_stroke$order_df$insulin),
                mi = c(as.character(predicted_mi$df$dpp4),as.character(predicted_mi$df$glp1),as.character(predicted_mi$df$sglt2),as.character(predicted_mi$df$sulf),as.character(predicted_mi$df$thia),as.character(predicted_mi$df$insulin)),
                #rank_mi = c(predicted_mi$rank_df$dpp4, predicted_mi$rank_df$glp1, predicted_mi$rank_df$sglt2,predicted_mi$rank_df$sulf,predicted_mi$rank_df$thia,predicted_mi$rank_df$insulin),
                order_mi = c(predicted_mi$order_df$dpp4, predicted_mi$order_df$glp1, predicted_mi$order_df$sglt2,predicted_mi$order_df$sulf,predicted_mi$order_df$thia,predicted_mi$order_df$insulin),
                rf = c(as.character(predicted_rf$df$dpp4),as.character(predicted_rf$df$glp1),as.character(predicted_rf$df$sglt2),as.character(predicted_rf$df$sulf),as.character(predicted_rf$df$thia),as.character(predicted_rf$df$insulin)),
                #rank_rf = c(predicted_rf$rank_df$dpp4, predicted_rf$rank_df$glp1, predicted_rf$rank_df$sglt2,predicted_rf$rank_df$sulf,predicted_rf$rank_df$thia,predicted_rf$rank_df$insulin),
                order_rf = c(predicted_rf$order_df$dpp4, predicted_rf$order_df$glp1, predicted_rf$order_df$sglt2,predicted_rf$order_df$sulf,predicted_rf$order_df$thia,predicted_rf$order_df$insulin),
                htn = c(as.character(predicted_htn$df$dpp4),as.character(predicted_htn$df$glp1),as.character(predicted_htn$df$sglt2),as.character(predicted_htn$df$sulf),as.character(predicted_htn$df$thia),as.character(predicted_htn$df$insulin)),
                #rank_htn = c(predicted_htn$rank_df$dpp4, predicted_htn$rank_df$glp1, predicted_htn$rank_df$sglt2,predicted_htn$rank_df$sulf,predicted_htn$rank_df$thia,predicted_htn$rank_df$insulin),
                order_htn = c(predicted_htn$order_df$dpp4, predicted_htn$order_df$glp1, predicted_htn$order_df$sglt2,predicted_htn$order_df$sulf,predicted_htn$order_df$thia,predicted_htn$order_df$insulin),
                stringsAsFactors = F
            )
            output_data = output_data %>% 
                arrange(order_death, order_stroke, order_mi, order_rf, order_htn) 
            
            
            dominated = NULL
            for (i in c(6,5,4,3,2)) {
                for (j in c(1:(i-1))) {
                    if (all(output_data[i, c("order_death","order_stroke","order_mi","order_rf","order_htn")] >= output_data[j,c("order_death","order_stroke","order_mi","order_rf","order_htn")])) {
                        dominated = c(dominated, i+1)
                    }
                }
            }
            dominated = unique(dominated)

            v$rank = output_data %>% select(drug,death,stroke,mi,rf,htn)
            output_data = output_data %>% 
                # mutate(death = cell_spec(death, "html", background = factor(rank_death, c(5,4,3,2,1,0), c("#44970C", "#afa93a", "#FEE100", "#EC3017", "#cc0000", "#b60202"))),
                #        stroke = cell_spec(stroke, "html", background = factor(rank_stroke, c(5,4,3,2,1,0), c("#44970C", "#afa93a", "#FEE100", "#EC3017", "#cc0000", "#b60202"))),
                #        mi = cell_spec(mi, "html", background = factor(rank_mi, c(5,4,3,2,1,0), c("#44970C", "#afa93a", "#FEE100", "#EC3017", "#cc0000", "#b60202"))),
                #        rf = cell_spec(rf, "html", background = factor(rank_rf, c(5,4,3,2,1,0), c("#44970C", "#afa93a", "#FEE100", "#EC3017", "#cc0000", "#b60202"))),
                #        htn = cell_spec(htn, "html", background = factor(rank_htn, c(5,4,3,2,1,0), c("#44970C", "#afa93a", "#FEE100", "#EC3017", "#cc0000", "#b60202")))) %>% 
                select(drug, death, stroke, mi, rf, htn)
            rownames(output_data) = output_data$drug
            output_data$drug=NULL
            colnames(output_data) = c("Death", "Non-fatal stroke", "Non-fatal MI", "Renal failure", "Hypertension")
            
            output_data = t(output_data) %>% 
                as.data.frame(., stringsAsFactors=F) %>% 
                knitr::kable("html", escape = F, align=c("l", "c", "c", "c", "c", "c", "c")) %>% 
                kable_styling(bootstrap_options = c("striped"), full_width = T, font_size =15) %>% 
                column_spec(1, bold = T) %>% 
                column_spec(dominated, color = "white", background = "#999999") %>% 
                footnote(general = "Drugs that are worse than another drug on all possible outcomes are considered dominated and appear as inverse video in the table and are omitted from the spider plot.
                         DPP4: Dipeptidyl peptidase-4 inhibitor;
                         GLP1: Glucagon-like Peptide-1 agonist;
                         SGLT2: Sodium-Glucose Co-transporter 2 inhibitor;
                         SFU: Sulfonylurea; 
                         TZD: Thiazolidinedione;
                         Insulin: Insulin-Basal or Bolus or Mixed insulin")
            v$res = output_data
        } 
        v$res
    })
    
    output$plot = renderPlot({
        if(v$run==1) {
            rank_df = v$rank

            rank_df = rank_df %>% 
                mutate(death = as.numeric(gsub("%", "", death))/100,
                       stroke = as.numeric(gsub("%", "", stroke))/100,
                       mi = as.numeric(gsub("%", "", mi))/100,
                       rf = as.numeric(gsub("%", "", rf))/100,
                       htn = as.numeric(gsub("%", "", htn))/100) %>% 
                filter(is.na(lag(death)) |
                           (death < lag(death)) |
                           (stroke < lag(stroke)) |
                           (mi < lag(mi)) |
                           (rf < lag(rf)) |
                           (htn < lag(htn))) %>% 
                mutate(death =(death - min(death)) / (max(death) - min(death)),
                       stroke = (stroke-min(stroke)) / (max(stroke)-min(stroke)),
                       mi = (mi-min(mi)) / (max(mi)-min(mi)),
                       rf = (rf-min(rf)) / (max(rf)-min(rf)),
                       htn = (htn-min(htn)) / (max(htn)-min(htn))) %>% 
                mutate(death = ifelse(is.na(death), 0, death),
                       stroke = ifelse(is.na(stroke), 0, stroke),
                       mi = ifelse(is.na(mi), 0, mi),
                       rf = ifelse(is.na(rf), 0, rf),
                       htn = ifelse(is.na(htn), 0, htn))

            colnames(rank_df) = c("Drug", "Death", "Stroke", "MI", "Renal failure", "HTN")

            
            shinyjs::hide("running")
            ggradar(rank_df, grid.min = 0, grid.max = 1, grid.mid = 0.5, values.radar = c('', '', ''))+ ggplot2::labs(subtitle="(dominated drugs excluded)")
        }
    })
}

# Run the application 
shinyApp(ui = ui, server = server)
