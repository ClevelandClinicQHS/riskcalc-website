dominated=c("Insulin")
runApp()
runApp()
runApp()
runApp()
runApp()
dominated
unique(dominated)
output_data
runApp()
runApp()
dominated
output_data = output_data %>%
# mutate(death = cell_spec(death, "html", background = factor(rank_death, c(5,4,3,2,1,0), c("#44970C", "#afa93a", "#FEE100", "#EC3017", "#cc0000", "#b60202"))),
#        stroke = cell_spec(stroke, "html", background = factor(rank_stroke, c(5,4,3,2,1,0), c("#44970C", "#afa93a", "#FEE100", "#EC3017", "#cc0000", "#b60202"))),
#        mi = cell_spec(mi, "html", background = factor(rank_mi, c(5,4,3,2,1,0), c("#44970C", "#afa93a", "#FEE100", "#EC3017", "#cc0000", "#b60202"))),
#        rf = cell_spec(rf, "html", background = factor(rank_rf, c(5,4,3,2,1,0), c("#44970C", "#afa93a", "#FEE100", "#EC3017", "#cc0000", "#b60202"))),
#        htn = cell_spec(htn, "html", background = factor(rank_htn, c(5,4,3,2,1,0), c("#44970C", "#afa93a", "#FEE100", "#EC3017", "#cc0000", "#b60202")))) %>%
select(drug, death, stroke, mi, rf, htn)
rownames(output_data) = output_data$drug
output_data$drug=NULL
colnames(output_data) = c("Death", "Non-fatal stroke", "Non-fatal MI", "Renal failure", "Hypertension")
output_data = t(output_data) %>%
as.data.frame(., stringsAsFactors=F) %>%
knitr::kable("html", escape = F, align=c("l", "c", "c", "c", "c", "c", "c")) %>%
kable_styling(bootstrap_options = c("striped"), full_width = T, font_size =15) %>%
column_spec(1, bold = T) %>%
column_spec(dominated, color = "white", background = "#999999") %>%
footnote(general = "Drugs that are worse than another drug on all possible outcomes are considered dominated and appear as inverse video in the table and are omitted from the spider plot.
DPP4: Dipeptidyl peptidase-4 inhibitor;
GLP1: Glucagon-like Peptide-1 agonist;
SGLT2: Sodium-Glucose Co-transporter 2 inhibitor;
SFU: Sulfonylurea;
TZD: Thiazolidinedione;
Insulin: Insulin-Basal or Bolus or Mixed insulin")
output_data
runApp()
runApp()
runApp()
runApp()
df
data.frame(dpp4 = 1 - 0.947771^exp(lp.dpp4), glp1 = 1 -
0.947771^exp(lp.glp1), insulin = 1 - 0.947771^exp(lp.insulin),
sglt2 = 1 - 0.947771^exp(lp.sglt2), sulf = 1 - 0.947771^exp(lp.sulf),
thia = 1 - 0.947771^exp(lp.thia))
browser()
runApp()
data
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lp.dpp4 = + 0.031489359 * data$Age -
6.664337e-06 * max(data$Age - 42.376979, 0)**3 + 1.3820765e-05 * max(data$Age - 59.629877, 0)**3 -
7.1564278e-06 * max(data$Age - 75.696429, 0)**3 + 0.24909325 * (data$Race == "Black race") + 0.10236214 *
(data$Race == "Asians") - 0.29071924 * (data$Race == "Other/Unknown") -
0.17100158 * (data$Marital == "Married or demestic parter") -
0.1007223 * (data$Marital == "Divorced/Separated/Widow") + 0.15503426 *
(data$Marital == "Other/Unknown") - 1.6693114e-06 * data$MedianIncome -
6.6842065e-16 * max(data$MedianIncome - 32090, 0)**3 + 1.1539719e-15 *
max(data$MedianIncome - 52665, 0)**3 - 4.855513e-16 * max(data$MedianIncome - 80989, 0)**3 +
0.54362685 * (data$FinancialClass == "Medicaid") +
0.59875497 * (data$FinancialClass == "Medicare") + 0.19064789 *
(data$FinancialClass == "Other") + 0.33294519 * data$Hx.HTN + 0.18194249 *
data$Hx.HTN.Med + 2.0012831 * data$Hx.RenalFailure - 0.1106341 * data$A1c +
0.005612613 * max(data$A1c - 6.3, 0)**3 - 0.0082435254 * max(data$A1c - 7.8, 0)**3 +
0.0026309124 * max(data$A1c - 11, 0)**3 - 0.030005189 *
data$Diastolic + 2.7542868e-05 * max(data$Diastolic - 66.333333, 0)**3 -
5.6807165e-05 * max(data$Diastolic - 77.666667, 0)**3 + 2.9264297e-05 *
max(data$Diastolic - 88.333333, 0)**3 + 0.012598959 * data$Systolic -
2.6967699e-06 * max(data$Systolic - 116, 0)**3 + 4.7548312e-06 *
max(data$Systolic - 130.5, 0)**3 - 2.0580613e-06 * max(data$Systolic - 149.5, 0)**3 +
0.095277319 * (data$SmokingHistory == "Current Smoker") +
0.11938289 * (data$SmokingHistory == "Former smoker") + 0.30327828 *
data$HeartDisease + 0.42473545 * data$HF - 0.18652207 * data$Dyslipidemia
runApp()
runApp()
rank_df
rank_df = rank_df %>%
mutate(death = as.numeric(gsub("%", "", death))/100,
stroke = as.numeric(gsub("%", "", stroke))/100,
mi = as.numeric(gsub("%", "", mi))/100,
rf = as.numeric(gsub("%", "", rf))/100,
htn = as.numeric(gsub("%", "", htn))/100) %>%
filter(is.na(lag(death)) |
(death < lag(death)) |
(stroke < lag(stroke)) |
(mi < lag(mi)) |
(rf < lag(rf)) |
(htn < lag(htn))) %>%
mutate(death =(death - min(death)) / (max(death) - min(death)),
stroke = (stroke-min(stroke)) / (max(stroke)-min(stroke)),
mi = (mi-min(mi)) / (max(mi)-min(mi)),
rf = (rf-min(rf)) / (max(rf)-min(rf)),
htn = (htn-min(htn)) / (max(htn)-min(htn)))
rank_df
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
input$zip = NULL
input = list(zip = NULL)
input$zip
!is.null(input$zip)
medianincome = read.csv(file = "medianincome.csv", header = TRUE, colClasses = c("character", "numeric"))
medianincome = read.csv(file = "medianincome.csv", header = TRUE, colClasses = c("character", "numeric"))
adi = read.csv(file="adi.csv", header = T, colClasses = c("character", "numeric"))
medianincome$ZIP
runApp()
!is.null(input$zip) & input$zip %in% adi$ZIP
!is.null(input$zip
)
input$zip %in% adi$ZIP
!is.null(input$zip) & (input$zip %in% adi$ZIP)
!is.null(input$zip) | (input$zip %in% adi$ZIP)
runApp()
##Dataset
library (readxl)
dataset <- read_excel("H:/Project/Bando_GastricCancer/DATASETCN.xlsx")
library(dplyr)
library(doBy)
library(rms)
library(ClevClinicQHS)
library(Hmisc)
library(lattice)
library(survival)
library(Formula)
library(ggplot2)
library(SparseM)
library(cmprsk)
library(bindrcpp)
library(survAUC)
library(QHScrnomo)
library(caret)
library(mice)
library(riskRegression)
names(dataset) <- make.names(names(dataset))
dataset <- dataset %>% mutate(LocCox = as.factor(LocCox),
cT = as.factor(cT),
cNJPN = as.factor(cNJPN),
Liver = as.factor(Liver),
Peritoneum = as.factor(Peritoneum),
cM = as.factor(cM),
MacroType = as.factor(MacroType),
Histology = as.factor(Histology),
Sex = as.factor(Sex),
ECOGPS = as.factor(ECOGPS),
SerumCEA.log = log(SerumCEA),
SerumCA19.log = log(SerumCA19))
levels(dataset$LocCox) <- c("L", "U", "M", "Entire", "EGJ")
levels(dataset$cT) <- c("T1a", "T1b", "T2", "T3", "T4a", "T4b")
levels(dataset$cNJPN) <- c("N0", "N1", "N2a", "N2b", "NM")
levels(dataset$Liver) <- c("Negative", "Solitary", "Multiple")
levels(dataset$Peritoneum) <- c("Negative", "Positive")
levels(dataset$cM) <- c("Negative", "Positive")
levels(dataset$MacroType) <- c("Type0", "Type1", "Type2", "Type3", "Type4")
levels(dataset$Histology) <- c("G1", "G2", "G3")
levels(dataset$Sex) <- c("F", "M")
levels(dataset$ECOGPS) <- c("0", "1", "2", "3 or 4")
dataset <- data.frame(dataset)
gmodels::CrossTable(dataset$Prog, dataset$LocCox, chisq = T)
gmodels::CrossTable(dataset$Prog, dataset$cT, chisq = T)
gmodels::CrossTable(dataset$Prog, dataset$cNJPN, chisq = T)
gmodels::CrossTable(dataset$Prog, dataset$Liver, chisq = T)
dataset <- read_excel("H:/Project/Bando_GastricCancer/DATASETCN.xlsx")
dataset <- read_excel("H:/Project/Bando_GastricCancer/gastric_cancer_nomogram/DATASETCN.xlsx")
names(dataset) <- make.names(names(dataset))
dataset <- dataset %>% mutate(LocCox = as.factor(LocCox),
cT = as.factor(cT),
cNJPN = as.factor(cNJPN),
Liver = as.factor(Liver),
Peritoneum = as.factor(Peritoneum),
cM = as.factor(cM),
MacroType = as.factor(MacroType),
Histology = as.factor(Histology),
Sex = as.factor(Sex),
ECOGPS = as.factor(ECOGPS),
SerumCEA.log = log(SerumCEA),
SerumCA19.log = log(SerumCA19))
levels(dataset$LocCox) <- c("L", "U", "M", "Entire", "EGJ")
levels(dataset$cT) <- c("T1a", "T1b", "T2", "T3", "T4a", "T4b")
levels(dataset$cNJPN) <- c("N0", "N1", "N2a", "N2b", "NM")
levels(dataset$Liver) <- c("Negative", "Solitary", "Multiple")
levels(dataset$Peritoneum) <- c("Negative", "Positive")
levels(dataset$cM) <- c("Negative", "Positive")
levels(dataset$MacroType) <- c("Type0", "Type1", "Type2", "Type3", "Type4")
levels(dataset$Histology) <- c("G1", "G2", "G3")
levels(dataset$Sex) <- c("F", "M")
levels(dataset$ECOGPS) <- c("0", "1", "2", "3 or 4")
dataset <- data.frame(dataset)
progs.final <- cph(formula = Surv(Survival, ProgSpecific == 1) ~ LocCox
+ PreSize + cT  + NumRegioLN + cNJPN
+ Liver + Peritoneum
+ cM + MacroType + Histology + rcs(Age, 3) + ECOGPS
+ SerumCEA.log + SerumCA19.log,
data = dataset, x = TRUE, y = TRUE, surv = TRUE, time.inc = 1)
progs.crr.final <- crr.fit(progs.final, cencode = 0, failcode = 1)
prog.crr.final.nomo <- progs.crr.final
prog.crr.final.nomo <- Newlabels(prog.crr.final.nomo,
c(LocCox = "Location",
cT = "cT (Depth)",
NumRegioLN = "cN (Number)",
PreSize = "Tumor Size",
cNJPN = "cN (Location)",
##                                   RegionalLNMaxSize = "Size of RegioLN",
SerumCEA.log = "Serum CEA (ln)",
SerumCA19.log = "Serum CA19-9 (ln)",
MacroType = "Macroscopic Type"
))
prog.crr.final.nomo
nomogram(prog.crr.final.nomo)
nom = nomogram.crr(prog.crr.final.nomo, failtime = c(1,3,5), lp = F,
funlabel = list("Predicted 1-year DSM", "Predicted 3-year DSM", "Predicted 5-year DSM"),
fun.at = c(0.01, 0.02, 0.03, 0.05, seq(0.1, 0.9, 0.1), 0.95, 0.99),
total.max = 300, total.min = 0, cex.axis = 0.8, lmgp = 0.25, xfrac = 0.3)
## Multivariable regression
dd <- datadist(dataset)
options(datadist = "dd")
nom = nomogram.crr(prog.crr.final.nomo, failtime = c(1,3,5), lp = F,
funlabel = list("Predicted 1-year DSM", "Predicted 3-year DSM", "Predicted 5-year DSM"),
fun.at = c(0.01, 0.02, 0.03, 0.05, seq(0.1, 0.9, 0.1), 0.95, 0.99),
total.max = 300, total.min = 0, cex.axis = 0.8, lmgp = 0.25, xfrac = 0.3)
nom
print(nom)
progs.crr.final.nomo
prog.crr.final.nomo <- progs.crr.final
prog.crr.final.nomo <- Newlabels(prog.crr.final.nomo,
c(LocCox = "Location",
cT = "cT (Depth)",
NumRegioLN = "cN (Number)",
PreSize = "Tumor Size",
cNJPN = "cN (Location)",
##                                   RegionalLNMaxSize = "Size of RegioLN",
SerumCEA.log = "Serum CEA (ln)",
SerumCA19.log = "Serum CA19-9 (ln)",
MacroType = "Macroscopic Type"
))
prog.crr.final.nomo
nom = nomogram.crr(prog.crr.final.nomo, failtime = c(1,3,5), lp = F,
funlabel = list("Predicted 1-year DSM", "Predicted 3-year DSM", "Predicted 5-year DSM"),
fun.at = c(0.01, 0.02, 0.03, 0.05, seq(0.1, 0.9, 0.1), 0.95, 0.99),
total.max = 300, total.min = 0, cex.axis = 0.8, lmgp = 0.25, xfrac = 0.3)
nom$`Serum CEA (ln)`
nom$`Serum CEA (ln)`$SerumCEA.log = exp(nom$`Serum CEA (ln)`$SerumCEA.log)
plot(nom)
nomogram(nom)
nom
plot(nom)
?plot.nomogram
class(nom)
plot(nom)
nom$abbrev
nom$Location
nom = nomogram(prog.crr.final.nomo, failtime = c(1,3,5), lp = F,
funlabel = list("Predicted 1-year DSM", "Predicted 3-year DSM", "Predicted 5-year DSM"),
fun.at = c(0.01, 0.02, 0.03, 0.05, seq(0.1, 0.9, 0.1), 0.95, 0.99),
total.max = 300, total.min = 0, cex.axis = 0.8, lmgp = 0.25, xfrac = 0.3)
nom = nomogram.mk6(prog.crr.final.nomo, failtime = c(1,3,5), lp = F,
funlabel = list("Predicted 1-year DSM", "Predicted 3-year DSM", "Predicted 5-year DSM"),
fun.at = c(0.01, 0.02, 0.03, 0.05, seq(0.1, 0.9, 0.1), 0.95, 0.99),
total.max = 300, total.min = 0, cex.axis = 0.8, lmgp = 0.25, xfrac = 0.3)
nom = nomogram.crr(prog.crr.final.nomo, failtime = c(1,3,5), lp = F,
funlabel = list("Predicted 1-year DSM", "Predicted 3-year DSM", "Predicted 5-year DSM"),
fun.at = c(0.01, 0.02, 0.03, 0.05, seq(0.1, 0.9, 0.1), 0.95, 0.99),
total.max = 300, total.min = 0, cex.axis = 0.8, lmgp = 0.25, xfrac = 0.3)
dd
plot(nom)
plot(nom, xlim=c(0,1))
n <- 1000    # define sample size
set.seed(17) # so can reproduce the results
d <- data.frame(age = rnorm(n, 50, 10),
blood.pressure = rnorm(n, 120, 15),
cholesterol = rnorm(n, 200, 25),
sex = factor(sample(c('female','male'), n,TRUE)))
# Specify population model for log odds that Y=1
# Simulate binary y to have Prob(y=1) = 1/[1+exp(-L)]
d <- upData(d,
L = .4*(sex=='male') + .045*(age-50) +
(log(cholesterol - 10)-5.2)*(-2*(sex=='female') + 2*(sex=='male')),
y = ifelse(runif(n) < plogis(L), 1, 0))
ddist <- datadist(d); options(datadist='ddist')
f <- lrm(y ~ lsp(age,50) + sex * rcs(cholesterol, 4) + blood.pressure,
data=d)
nom <- nomogram(f, fun=function(x)1/(1+exp(-x)),  # or fun=plogis
fun.at=c(.001,.01,.05,seq(.1,.9,by=.1),.95,.99,.999),
funlabel="Risk of Death")
nomogram.crr
?nomogram.mk6
nom
plot(nom)
prog.crr.final.nomo <- progs.crr.final
prog.crr.final.nomo <- Newlabels(prog.crr.final.nomo,
c(LocCox = "Location",
cT = "cT (Depth)",
NumRegioLN = "cN (Number)",
PreSize = "Tumor Size",
cNJPN = "cN (Location)",
##                                   RegionalLNMaxSize = "Size of RegioLN",
SerumCEA.log = "Serum CEA (ln)",
SerumCA19.log = "Serum CA19-9 (ln)",
MacroType = "Macroscopic Type"
))
nom = nomogram.crr(prog.crr.final.nomo, failtime = c(1,3,5), lp = F,
funlabel = list("Predicted 1-year DSM", "Predicted 3-year DSM", "Predicted 5-year DSM"),
fun.at = c(0.01, 0.02, 0.03, 0.05, seq(0.1, 0.9, 0.1), 0.95, 0.99),
total.max = 300, total.min = 0, cex.axis = 0.8, lmgp = 0.25, xfrac = 0.3)
## Multivariable regression
dd <- datadist(dataset)
options(datadist = "dd")
nomogram.crr
nomo2.crr
QHScrnomo:::nomo2.crr
cph.f = prog.crr.final.nomo$cph.f
assign("cph.f", cph.f, 1)
assign("fit", prog.crr.final.nomo, 1)
nm <- names(cph.f$coefficients)
for (i in 1:nt) {
expr <- parse(text = paste("function(x) 1 - nomo2.crr(x + cph.f$center,\n           fit,time = ",
failtime[i], ")", sep = ""))
func[[i]] <- eval(expr)
}
nt <- c(1,3,5)
nomogram.mk6
n <- 1000    # define sample size
set.seed(17) # so can reproduce the results
d <- data.frame(age = rnorm(n, 50, 10),
blood.pressure = rnorm(n, 120, 15),
cholesterol = rnorm(n, 200, 25),
sex = factor(sample(c('female','male'), n,TRUE)))
# Specify population model for log odds that Y=1
# Simulate binary y to have Prob(y=1) = 1/[1+exp(-L)]
d <- upData(d,
L = .4*(sex=='male') + .045*(age-50) +
(log(cholesterol - 10)-5.2)*(-2*(sex=='female') + 2*(sex=='male')),
y = ifelse(runif(n) < plogis(L), 1, 0))
ddist <- datadist(d); options(datadist='ddist')
f <- lrm(y ~ lsp(age,50) + sex * rcs(cholesterol, 4) + blood.pressure,
data=d)
nom <- nomogram(f, fun=function(x)1/(1+exp(-x)),  # or fun=plogis
fun.at=c(.001,.01,.05,seq(.1,.9,by=.1),.95,.99,.999),
funlabel="Risk of Death")
no
nom
str(nom)
datadis
## Multivariable regression
dd <- datadist(dataset)
options(datadist = "dd")
nom2 = nomogram.crr(prog.crr.final.nomo, failtime = c(1,3,5), lp = F,
funlabel = list("Predicted 1-year DSM", "Predicted 3-year DSM", "Predicted 5-year DSM"),
fun.at = c(0.01, 0.02, 0.03, 0.05, seq(0.1, 0.9, 0.1), 0.95, 0.99),
total.max = 300, total.min = 0, cex.axis = 0.8, lmgp = 0.25, xfrac = 0.3)
nom2
str(nom2)
str(nom)
a = nomogram(cph.f)
str(a)
nomo <- nomogram(prog.final.nomo,
SerumCEA.log = log(c(0.5, 1, 10, 100, 1000, 10000)),
SerumCA19.log = log(c(1, 10, 100, 1000, 10000, 100000)),
fun = list(function(x) surv(1, lp = x),
function(x) surv(3, lp = x),
function(x) surv(5, lp = x)),
funlabel = c("Predicted 1-year OS",
"Predicted 3-year OS",
"Predicted 5-year OS"),
fun.at = list(c(0.01, 0.05, 0.1, seq(0.2, 0.8, by = 0.1), 0.9, 0.95, 0.98, 0.99),
c(0.01, 0.05, 0.1, seq(0.2, 0.8, by = 0.1), 0.9, 0.95, 0.97),
c(0.01, 0.05, 0.1, seq(0.2, 0.8, by = 0.1), 0.9, 0.95, 0.96)), lp = F)
runApp('H:/shiny_library/ProstateMortalityWithBiochemicalRecurrenceAfterProstatectomy')
runApp('H:/shiny_library/ProstateMortalityWithBiochemicalRecurrenceAfterProstatectomy')
install.packages("shiny")
shiny::runApp('H:/shiny_library/ProstateMortalityWithBiochemicalRecurrenceAfterProstatectomy')
shiny::runApp('H:/shiny_library/ProstateMortalityWithBiochemicalRecurrenceAfterProstatectomy')
shiny::runApp('H:/shiny_library/ProstateMortalityWithBiochemicalRecurrenceAfterProstatectomy')
install.packages("htmltools")
shiny::runApp('H:/shiny_library/ProstateMortalityWithBiochemicalRecurrenceAfterProstatectomy')
shiny::runApp('H:/shiny_library/ProstateMortalityWithBiochemicalRecurrenceAfterProstatectomy')
unloadNamespace("htmltool")
unloadNamespace("htmltools")
shiny::runApp('H:/shiny_library/ProstateMortalityWithBiochemicalRecurrenceAfterProstatectomy')
sessionInfo()
shiny::runApp('H:/shiny_library/ProstateMortalityWithBiochemicalRecurrenceAfterProstatectomy')
install.packages("htmltools")
shiny::runApp('H:/shiny_library/ProstateMortalityWithBiochemicalRecurrenceAfterProstatectomy')
res5yr
exp(-0.041859658 * AGEYr +
0.00013684103 * max(AGEYr - 53, 0)**3 -
0.00033232823 * max(AGEYr - 63, 0)**3 +
0.00019548719 * max(AGEYr - 70, 0)**3 -
0.067285939 * 0 +
0.00039401463 * max(0 + 21, 0)**3 -
0.00091936747 * max(0 + 13, 0)**3 +
0.00052535284 * max(0 + 7, 0)**3 +
0.00055743143 * TIME_FAILURE +
0.0014587674 * max(TIME_FAILURE - 0.61, 0)**3 -
0.0019954124 * max(TIME_FAILURE - 2.8583333, 0)**3 +
0.00053664501 * max(TIME_FAILURE - 8.97, 0)**3 -
0.11100033 * PSADT +
0.00018644558 * max(PSADT - 3, 0)**3 -
0.00024368764 * max(PSADT - 10, 0)**3 +
5.7242063e-05 * max(PSADT - 32.8, 0)**3 +
0.67802567 * min(REC_PSA, 20) -
0.16055363 * max(min(REC_PSA, 20) - 0.25, 0)**3 +
0.17762343 * max(min(REC_PSA, 20) - 0.6, 0)**3 -
0.017069797 * max(min(REC_PSA, 20) - 3.892, 0)**3 -
0.10098806 * PREOP_PSA +
0.00036162407 * max(PREOP_PSA - 4.2, 0)**3 -
0.00046029054 * max(PREOP_PSA - 8.5, 0)**3 +
9.8666466e-05 * max(PREOP_PSA - 24.26, 0)**3 +
0.56708509 * (RP_GLSN_New == "3+4") +
0.45585755 * (RP_GLSN_New == "4+3") +
0.70940336 * (RP_GLSN_New == "8") +
1.5113785 * (RP_GLSN_New == "9") +
0.29032458 * (ECE == "Present") -
0.0098008475 * (MARGINS == "Positive") +
0.97419957 * (SVI == "Present") +
0.34321528 * (NUM_LN_POS_New == "Positive")
)
0.11100033 * PSADT +
0.00018644558 * max(PSADT - 3, 0)**3 -
0.00024368764 * max(PSADT - 10, 0)**3 +
5.7242063e-05 * max(PSADT - 32.8, 0)**3
exp(13)
-0.11100033 * PSADT +
0.00018644558 * max(PSADT - 3, 0)**3 -
0.00024368764 * max(PSADT - 10, 0)**3 +
5.7242063e-05 * max(PSADT - 32.8, 0)**3
exp(-1.4)
-0.041859658 * AGEYr +
0.00013684103 * max(AGEYr - 53, 0)**3 -
0.00033232823 * max(AGEYr - 63, 0)**3 +
0.00019548719 * max(AGEYr - 70, 0)**3 -
0.067285939 * 0 +
0.00039401463 * max(0 + 21, 0)**3 -
0.00091936747 * max(0 + 13, 0)**3 +
0.00052535284 * max(0 + 7, 0)**3 +
0.00055743143 * TIME_FAILURE +
0.0014587674 * max(TIME_FAILURE - 0.61, 0)**3 -
0.0019954124 * max(TIME_FAILURE - 2.8583333, 0)**3 +
0.00053664501 * max(TIME_FAILURE - 8.97, 0)**3 -
0.11100033 * PSADT +
0.00018644558 * max(PSADT - 3, 0)**3 -
0.00024368764 * max(PSADT - 10, 0)**3 +
5.7242063e-05 * max(PSADT - 32.8, 0)**3 +
0.67802567 * min(REC_PSA, 20) -
0.16055363 * max(min(REC_PSA, 20) - 0.25, 0)**3 +
0.17762343 * max(min(REC_PSA, 20) - 0.6, 0)**3 -
0.017069797 * max(min(REC_PSA, 20) - 3.892, 0)**3 -
0.10098806 * PREOP_PSA +
0.00036162407 * max(PREOP_PSA - 4.2, 0)**3 -
0.00046029054 * max(PREOP_PSA - 8.5, 0)**3 +
9.8666466e-05 * max(PREOP_PSA - 24.26, 0)**3 +
0.56708509 * (RP_GLSN_New == "3+4") +
0.45585755 * (RP_GLSN_New == "4+3") +
0.70940336 * (RP_GLSN_New == "8") +
1.5113785 * (RP_GLSN_New == "9") +
0.29032458 * (ECE == "Present") -
0.0098008475 * (MARGINS == "Positive") +
0.97419957 * (SVI == "Present") +
0.34321528 * (NUM_LN_POS_New == "Positive")
exp(4)
0.015665516 * AGEYr -
6.1788625e-05 * max(AGEYr - 52, 0)**3 +
0.00013902441 * max(AGEYr - 62, 0)**3 -
7.7235781e-05 * max(AGEYr - 70, 0)**3 -
0.0070272476 * 0 -
0.00022614896 * max(0 + 20, 0)**3 +
0.0005276809 * max(0 + 12, 0)**3 -
0.00030153194 * max(0 + 6, 0)**3 -
0.19575735 * TIME_FAILURE +
0.0050977464 * max(TIME_FAILURE - 0.25833333, 0)**3 -
0.0067847704 * max(TIME_FAILURE - 2.175, 0)**3 +
0.001687024 * max(TIME_FAILURE - 7.9666667, 0)**3 +
0.88408075 * min(REC_PSA, 20) -
0.19154029 * max(min(REC_PSA, 20) - 0.2, 0)**3 +
0.21101896 * max(min(REC_PSA, 20) - 0.56, 0)**3 -
0.019478673 * max(min(REC_PSA, 20) - 4.1, 0)**3 -
0.067191183 * PREOP_PSA +
0.00017472627 * max(PREOP_PSA - 4.148, 0)**3 -
0.00021916116 * max(PREOP_PSA - 8.1, 0)**3 +
4.4434891e-05 * max(PREOP_PSA - 23.64, 0)**3 +
0.9225297 * (RP_GLSN_New == "3+4") +
0.93713312 * (RP_GLSN_New == "4+3") +
1.2011357 * (RP_GLSN_New == "8") +
1.6656093 * (RP_GLSN_New == "9") +
0.53018017 * (ECE == "Present") -
0.062705917 * (MARGINS == "Positive") +
0.62161688 * (SVI == "Present") +
0.12221677 * (NUM_LN_POS_New == "Positive")
shiny::runApp()
install.packages("ggradar")
