HousingWithMogage = "B25027_002",
HousingWoMogage = "B25027_010"),
year = 2018,
state = c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID"
"IL","IN","IA","KS","KY","LA","ME","MT","NE","NV","NH","NJ","NM",
"NY","NC","ND","OH","OK","OR","MD","MA","MI","MN","MS","MO","PA",
"RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"),
geometry = F,
cache_table = T)
income = get_acs(
geography = "tract",
variables = c(
TotalHousing = "B00002_001",
MedianIncome = "B19013_001",
HousingWithMogage = "B25027_002",
HousingWoMogage = "B25027_010"),
year = 2018,
state = c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID",
"IL","IN","IA","KS","KY","LA","ME","MT","NE","NV","NH","NJ","NM",
"NY","NC","ND","OH","OK","OR","MD","MA","MI","MN","MS","MO","PA",
"RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"),
geometry = F,
cache_table = T)
income$area = st_area(population)
area = st_area(population)
View(income)
View(population)
View(v17)
income = get_acs(
geography = "tract",
variables = c(
Population = "B00003_001",
TotalHousing = "B00002_001",
MedianIncome = "B19013_001",
HousingWithMogage = "B25027_002",
HousingWoMogage = "B25027_010"),
year = 2018,
state = c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID",
"IL","IN","IA","KS","KY","LA","ME","MT","NE","NV","NH","NJ","NM",
"NY","NC","ND","OH","OK","OR","MD","MA","MI","MN","MS","MO","PA",
"RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"),
geometry = F,
cache_table = T)
library(tidycensus)
library(tidyverse)
library(sf)
income = get_acs(
geography = "tract",
variables = c(
Population = "B00003_001",
TotalHousing = "B00002_001",
MedianIncome = "B19013_001",
HousingWithMogage = "B25027_002",
HousingWoMogage = "B25027_010"),
year = 2018,
state = c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID",
"IL","IN","IA","KS","KY","LA","ME","MT","NE","NV","NH","NJ","NM",
"NY","NC","ND","OH","OK","OR","MD","MA","MI","MN","MS","MO","PA",
"RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"),
geometry = T,
cache_table = T)
income = get_acs(
geography = "tract",
variables = c(
Population = "B00003_001",
TotalHousing = "B00002_001",
MedianIncome = "B19013_001",
HousingWithMogage = "B25027_002",
HousingWoMogage = "B25027_010"),
year = 2018,
state = c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID",
"IL","IN","IA","KS","KY","LA","ME","MT","NE","NV","NH","NJ","NM",
"NY","NC","ND","OH","OK","OR","MD","MA","MI","MN","MS","MO","PA",
"RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"),
geometry = F,
cache_table = T)
rlang::last_error()
income = get_acs(
geography = "tract",
variables = c(
Population = "B00003_001",
MedianIncome = "B19013_001",
HousingWithMogage = "B25027_002",
HousingWoMogage = "B25027_010"),
year = 2018,
state = c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID",
"IL","IN","IA","KS","KY","LA","ME","MT","NE","NV","NH","NJ","NM",
"NY","NC","ND","OH","OK","OR","MD","MA","MI","MN","MS","MO","PA",
"RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"),
geometry = F,
cache_table = T)
library(tidycensus)
library(tidyverse)
library(sf)
income = get_acs(
geography = "tract",
variables = c(
Population = "B00003_001",
MedianIncome = "B19013_001",
TotalHousing = "B25001_001",
HousingWithMogage = "B25027_002",
HousingWoMogage = "B25027_010"),
year = 2018,
state = c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID",
"IL","IN","IA","KS","KY","LA","ME","MT","NE","NV","NH","NJ","NM",
"NY","NC","ND","OH","OK","OR","MD","MA","MI","MN","MS","MO","PA",
"RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"),
geometry = F,
cache_table = T)
income1 = income
income = get_acs(
geography = "tract",
variables = c(
Population = "B00003_001",
TotalHousing = "B25001_001"),
year = 2018,
state = c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID",
"IL","IN","IA","KS","KY","LA","ME","MT","NE","NV","NH","NJ","NM",
"NY","NC","ND","OH","OK","OR","MD","MA","MI","MN","MS","MO","PA",
"RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"),
geometry = F,
cache_table = T)
library(tidycensus)
library(tidyverse)
library(sf)
income = get_acs(
geography = "tract",
variables = c(
Population = "B00003_001",
TotalHousing = "B25001_001"),
year = 2018,
state = c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID",
"IL","IN","IA","KS","KY","LA","ME","MT","NE","NV","NH","NJ","NM",
"NY","NC","ND","OH","OK","OR","MD","MA","MI","MN","MS","MO","PA",
"RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"),
geometry = F,
cache_table = T)
income = get_acs(
geography = "tract",
variables = c(
Population = "B00003_001",
TotalHousing = "B25001_001"),
year = 2018,
state = c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID",
"IL","IN","IA","KS","KY","LA","ME","MT","NE","NV","NH","NJ","NM",
"NY","NC","ND","OH","OK","OR","MD","MA","MI","MN","MS","MO","PA",
"RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"),
geometry = F,
cache_table = T)
income = get_acs(
geography = "tract",
variables = c(
Population = "B00003_001",
TotalHousing = "B25001_001"),
year = 2018,
state = c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID",
"IL","IN","IA","KS","KY","LA","ME","MT","NE","NV","NH","NJ","NM",
"NY","NC","ND","OH","OK","OR","MD","MA","MI","MN","MS","MO","PA",
"RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"),
geometry = F)
income = get_acs(
geography = "tract",
variables = c(
Population = "B00003_001",
TotalHousing = "B25001_001"),
year = 2018,
state = c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID"),
geometry = F)
income = get_acs(
geography = "tract",
variables = c(
Population = "B00003_001",
TotalHousing = "B25001_001"),
year = 2018,
state = c("AL"),
geometry = F)
income = get_acs(
geography = "tract",
variables = c(
Population = "B01003_001",
MedianIncome = "B19013_001",
TotalHousing = "B25001_001",
HousingWithMogage = "B25027_002",
HousingWoMogage = "B25027_010"),
year = 2018,
state = c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID",
"IL","IN","IA","KS","KY","LA","ME","MT","NE","NV","NH","NJ","NM",
"NY","NC","ND","OH","OK","OR","MD","MA","MI","MN","MS","MO","PA",
"RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"),
geometry = F,
cache_table = T)
View(income)
?pivot_wider
head(income)
income %>% select(-moe) %>% pivot_wider(names_from = "variable", values_from = "estimate")
income %>% select(-moe) %>%
pivot_wider(names_from = "variable", values_from = "estimate") %>%
select(-HousingWithMogage, -HousingWoMogage) %>%
mutate(area = area)
365280/6
income = income %>% select(-moe) %>%
pivot_wider(names_from = "variable", values_from = "estimate") %>%
select(-HousingWithMogage, -HousingWoMogage)
population$area = area
income = left_join(income, population %>% select(GEOID, area))
str(income)
income$geometry = NULL
View(income %>% filter(is.na(area)))
population1 = get_acs(
geography = "tract",
variables = c(
Population = "B01003_001")
year = 2018,
state = c("IA"),
geometry = T,
cache_table = T)
population1 = get_acs(
geography = "tract",
variables = c(Population = "B01003_001") ,
year = 2018,
state = c("IA"),
geometry = T,
cache_table = T)
population = rbind(population, population1)
names(population)
names(population1)
population$moe = NULL
population$area = NULL
population1$moe = NULL
names(population)
names(population1)
population = rbind(population, population1)
population$area = st_area(population)
income$area = NULL
income = left_join(income, population %>% select(GEOID, area))
Hmisc::describe(income$area)
str(income)
income$geometry = NULL
Hmisc::describe(income$area)
area = c(area)
area = as.numeric(area)
income$area = as.numeric(income$area)
Hmisc::describe(income$area)
View(income)
income %>% filter(GEOID == "36103158607")
income %>% filter(GEOID == "36103158607")
getwd()
setwd("/Users/jix/Documents/Project/covid/COVID19/")
library(readxl)
zip_code = read_xlsx("ZIP_TRACT_122019.xlsx")
income = left_join(income, zip_code %>% select(ZIP, TRACT),
by = c("GEOID" = "TRACT"))
View(income)
View(zip_code)
income$ZIP = NULL
income = distinct(income)
zip_code = read_xlsx("TRACT_ZIP_122019.xlsx")
names(zip_code)
income1 = left_join(income, zip_code %>% select(ZIP, TRACT),
by = c("GEOID" = "TRACT"))
View(income1)
View(zip_code)
names(income1)
income1 = income1 %>%
group_by(ZIP) %>%
summarise(Population = sum(Population),
MedianIncome = mean(MedianIncome),
TotalHousing = sum(TotalHousing),
Area = sum(area / 1000000))
View(income1)
income1 = left_join(income, zip_code %>% select(ZIP, TRACT),
by = c("GEOID" = "TRACT"))
income1 = income1 %>%
group_by(ZIP) %>%
summarise(Population = sum(Population),
MedianIncome = mean(MedianIncome),
TotalHousing = sum(TotalHousing),
Area = sum(area / 1000000)) %>%
mutate(PopulationPerHousingUnit = Population / TotalHousing,
PopulationPerSqKm = Population / Area)
head(income1)
income1 = left_join(income, zip_code %>% select(ZIP, TRACT),
by = c("GEOID" = "TRACT"))
income1 = income1 %>%
group_by(ZIP) %>%
summarise(Population = sum(Population, na.rm = T),
MedianIncome = mean(MedianIncome, na.rm = T),
TotalHousing = sum(TotalHousing, na.rm = T),
Area = sum(area, na.rm = T) / 1000000) %>%
mutate(PopulationPerHousingUnit = Population / TotalHousing,
PopulationPerSqKm = Population / Area)
head(income1)
income1 = left_join(income, zip_code %>% select(ZIP, TRACT),
by = c("GEOID" = "TRACT"))
income1 = income1 %>%
group_by(ZIP) %>%
summarise(Population = sum(Population, na.rm = T),
MedianIncome = mean(MedianIncome, na.rm = T),
TotalHousing = sum(TotalHousing, na.rm = T),
Area = sum(area, na.rm = T) / 1000000) %>%
mutate(PopulationPerHousingUnit = Population / TotalHousing,
PopulationPerSqKm = Population / Area) %>%
select(ZIP, MedianIncome, PopulationPerHousingUnit, PopulationPerSqKm)
head(income1)
write_csv(income1, "zip.csv")
income2 = income %>%
mutate(PopulationPerHousingUnit = Population / TotalHousing,
PopulationPerSqKm = Population / Area) %>%
select(ZIP, MedianIncome, PopulationPerHousingUnit, PopulationPerSqKm)
income2 = income %>%
mutate(PopulationPerHousingUnit = Population / TotalHousing,
PopulationPerSqKm = Population / (area / 1000000)) %>%
select(ZIP, MedianIncome, PopulationPerHousingUnit, PopulationPerSqKm)
income2 = income %>%
mutate(PopulationPerHousingUnit = Population / TotalHousing,
PopulationPerSqKm = Population / (area / 1000000)) %>%
select(GEOID, MedianIncome, PopulationPerHousingUnit, PopulationPerSqKm)
View(income2)
describe = Hmisc::describe
describe(income1 %>% select(-ZIP))
income1 = left_join(income, zip_code %>% select(ZIP, TRACT),
by = c("GEOID" = "TRACT"))
income1 = income1 %>%
group_by(ZIP) %>%
summarise(Population = sum(Population, na.rm = T),
MedianIncome = mean(MedianIncome, na.rm = T),
TotalHousing = sum(TotalHousing, na.rm = T),
Area = sum(area, na.rm = T) / 1000000) %>%
mutate(PopulationPerHousingUnit = Population / TotalHousing,
PopulationPerSqKm = Population / Area) %>%
mutate(PopulationPerHousingUnit = ifelse(is.na(PopulationPerHousingUnit), median(PopulationPerHousingUnit, na.rm = T), PopulationPerHousingUnit),
PopulationPerSqKm = ifelse(is.na(PopulationPerSqKm), median(PopulationPerSqKm, na.rm = T), PopulationPerSqKm),
MedianIncome  = ifelse(is.na(MedianIncome), median(MedianIncome, na.rm = T), MedianIncome)) %>%
select(ZIP, MedianIncome, PopulationPerHousingUnit, PopulationPerSqKm)
write.csv(data, "covid.csv", row.names = F)
write_csv(income1, "zip.csv")
describe(income1 %>% select(-ZIP))
income2 = income %>%
mutate(PopulationPerHousingUnit = Population / TotalHousing,
PopulationPerSqKm = Population / (area / 1000000)) %>%
mutate(PopulationPerHousingUnit = ifelse(is.na(PopulationPerHousingUnit), median(PopulationPerHousingUnit, na.rm = T), PopulationPerHousingUnit),
PopulationPerSqKm = ifelse(is.na(PopulationPerSqKm), median(PopulationPerSqKm, na.rm = T), PopulationPerSqKm),
MedianIncome  = ifelse(is.na(MedianIncome), median(MedianIncome, na.rm = T), MedianIncome)) %>%
select(GEOID, MedianIncome, PopulationPerHousingUnit, PopulationPerSqKm)
describe(income2 %>% select(-GEOID))
write_csv(income2, "tract.csv")
head(income2)
shinyWidgets::shinyWidgetsGallery()
runApp()
?switchInput
runApp()
fluidPage(
useShinyjs(),
theme = shinytheme("flatly"),
titlePanel('Predict COVID-19 test result'),
sidebarLayout(
sidebarPanel(id = "sidebar",
numericInput('age', 'Age', value = 18, min=0, max = 100),
bsTooltip("age", "Range: 0 - 100", "right", options = list(container = "body")),
selectInput('Race', 'Race', choices = c('White', 'Black','Asian', 'Other')),
selectInput('Ethnicity', 'Ethnicity', choices = c('Non-Hispanic', 'Hispanic', 'Unknown')),
selectInput('Gender', 'Gender', choices = c('Male', 'Female')),
selectInput('Smoking', 'Smoking', choices = c('No', "Current Smoker", 'Former Smoker', "Unknown")),
numericInput('BMI', 'BMI', value = 21, min=4, max = 60),
bsTooltip("BMI", "Range: 4 - 60", "right", options = list(container = "body")),
switchInput(inputId = "geo", offLabel = "ZIP",onLabel = "GEOID at TRACT level", value=F, size="mini"),
numericInput('DistanceToAnyPositive', 'Min Distance To Any Positive (km)', value = 50, min=0, max = 10000),
bsTooltip("DistanceToAnyPositive", "Range: 0 - 100000", "right", options = list(container = "body")),
selectizeInput('risk', 'Symptoms and risks',
choices = c('Cough',
"Exposure to COVID-19"="Expose_to_covid_19",
"Other family members with COVID-19"="Family_covid_19",
"Fever", "Flu like symptoms"="Flu_like_symptoms",
"Shortness of breath"='Sob',"Recent travel"="Recent_Travel",
"Loss of appetite"="Loss_of_appetite", "Vomiting"),
multiple = T,
options = list('plugins' = list('remove_button'),'create' = TRUE,'persist' = FALSE)),
selectizeInput('comorbidities', 'Comorbidities',
choices = c("COPD/Emphysema"="Copd_emphysema",
"Asthma", "Diabetes", "Hypertension",
"Coronary artery disease"="Coronary_artery_disease",
"Heart failure"="Heart_failure","Cancer",
"Immunosuppressive treatment"="Immunosuppressive_treatment",
"Multiple sclerosis"="Multiple_sclerosis",
"Connective tissue disease"="Connective_tissue_disease",
"Immunosuppressive disease" = "Immunosuppressive_disease",
"Connective tissue disease"="Connective_tissue_disease",
"IBD"="Ibd"),
multiple = T,
options = list('plugins' = list('remove_button'),'create' = TRUE,'persist' = FALSE)),
selectInput('pneumovax_shot', 'Pneumovax vaccine', choices = c('No', 'Yes')),
selectInput('flu_shot', 'Flu vaccine', choices = c('No', 'Yes')),
selectizeInput('medications', 'Pre-testing medications',
choices = c("Steroids" = "steroids",  "Carvedilol" = "carvedilol",
"Paroxetine" = "paroxetine",  "Melatonin" = "melatonin", "NSAIDS" = "nsaids",
"ACE Inhibitor"="ace_inhibitor",
"Angiotensin receptor blocker" = "arb", "Chloroquine"="colchicine"),
multiple = T,
options = list('plugins' = list('remove_button'),'create' = TRUE,'persist' = FALSE)),
materialSwitch("platelets", "Platelets?", status="success", inline=T),
materialSwitch("bun", "BUN?", status="success", inline=T),
materialSwitch("chloride", "Chloride?", status="success", inline = T),
materialSwitch("creatinine", "Creatinine?", status="success", inline=T),
materialSwitch("ast", "AST?", status="success", inline=T),
materialSwitch("hematocrit", "Hematocrit?", status="success", inline=T),
materialSwitch("potassium", "Potassium?", status="success", inline=T),
conditionalPanel(
condition = 'input.platelets==true',
numericInput('pre_testing_platelets', 'Platelets (k/uL)', value = 150, min = 100, max = 500, step=0.1),
bsTooltip("pre_testing_platelets", "Range: 100 - 500", "right", options = list(container = "body"))
),
conditionalPanel(
condition = 'input.bun==true',
numericInput('pre_testing_bun', 'BUN (mg/dL)', value = 7, min = 7, max = 21, step = 0.1),
bsTooltip("pre_testing_bun", "Range: 7 - 21", "right", options = list(container = "body"))
),
conditionalPanel(
condition = 'input.chloride==true',
numericInput('pre_testing_chloride', 'Chloride (mmol/L)', value = 97, min = 97, max = 105, step=0.1),
bsTooltip("pre_testing_chloride", "Range: 97 - 105", "right", options = list(container = "body"))
),conditionalPanel(
condition = 'input.ast==true',
numericInput('pre_testing_ast', 'AST (U/L)', value=7, min = 0, max = 200),
bsTooltip("pre_testing_ast", "Range: 0 - 200", "right", options = list(container = "body"))
),conditionalPanel(
condition = 'input.creatinine==true',
numericInput('pre_testing_creatinine', 'Creatinine (mg/dL)', value=0.58, min = 0.58, max = 0.96, step=0.01),
bsTooltip("pre_testing_creatinine", "Range: 0.58 - 0.96", "right", options = list(container = "body"))
),
conditionalPanel(
condition = 'input.hematocrit==true',
numericInput('pre_testing_hematocrit', 'Hematocrit (%)', value = 36, min = 36, max = 46, step=0.1),
bsTooltip("pre_testing_hematocrit", "Range: 36 - 46", "right", options = list(container = "body"))
),
conditionalPanel(
condition = 'input.potassium==true',
numericInput('pre_testing_potassium', 'Potassium (mEq/L)', value = 3, min= 2, max = 9, step = 0.1),
bsTooltip("pre_testing_potassium", "Range: 2 - 9", "right", options = list(container = "body"))
)
),
mainPanel(
actionButton("goButton", "Run Calculator"),
br(),
br(),
tags$head(
tags$style(type="text/css", "tfoot {display:none;}")
),
shinyjs::hidden(
div(id = "followup_panel",
wellPanel(
awesomeCheckboxGroup("followup", label = h3("Do you have any of these characteristics? Check all that apply"),
choices = list("A physician has suggested you need a COVID-19 test" = 1,
"End stage renal disease" = 2,
"Lung disease" = 3,
"HIV/AIDS" = 4,
"Solid organ transplant" = 5,
"None of the above" = 6),
selected = NULL),
actionButton("submit", "Submit")
)
)
),
shinyjs::hidden(div(id = "result_panel",DT::dataTableOutput('result'))),
shinyjs::hidden(div(id = "thankyou", wellPanel(h3("We’re sorry, but our calculator is not valid and not accurate for someone with your characteristics.")))),
br(),
#wellPanel(h3('Reference'),p("")),
wellPanel(h3('Disclaimer'),
p("No Medical Advice. ALTHOUGH SOME CONTENT MAY BE PROVIDED BY INDIVIDUALS IN THE MEDICAL PROFESSION, YOU ACKNOWLEDGE THAT PROVISION OF SUCH CONTENT DOES NOT CREATE A MEDICAL PROFESSIONAL-PATIENT RELATIONSHIP AND DOES NOT CONSTITUTE AN OPINION, MEDICAL ADVICE, PROFESSIONAL DIAGNOSIS, SERVICE OR TREATMENT OF ANY CONDITION. Access to general information is provided for educational purposes only, through this site and links to other sites. Content is not recommended or endorsed by any doctor or healthcare provider. The information and Content provided are not substitutes for medical or professional care, and you should not use the information in place of a visit, call, consultation or the advice of your physician or other healthcare provider. You are liable or responsible for any advice, course of treatment, diagnosis or any other information, services or product obtained through this site.")),
p(a("Homepage",
href = "../", style = "font-family: 'Lato','Helvetica Neue',Helvetica,Arial,sans-serif;
font-size: 15px;color: #2c3e50;font-weight: bold;text-align: center;text-decoration: underline;"),
" | ",
a("Contact Us",
href = "mailto:rcalcsupport@ccf.org?body=30-day%20and%2012-month%20Outcomes%20after%20Discharge%20for%20an%20Acute%20Coronary%20Syndrome", style = "font-family: 'Lato','Helvetica Neue',Helvetica,Arial,sans-serif;
font-size: 15px;color: #2c3e50;font-weight: bold;text-align: center;text-decoration: underline;"),
style = "text-align: center;"),
img(src='../logo-ccf.png', style = "max-width:30%; max-height:100%;"))))
runApp()
runApp()
runApp()
?conditionalPanel
runApp()
runApp()
runApp()
str(zip_code$TRACT)
str(zip_code$ZIP)
tract_data = read.csv("tract.csv")
zip_data = read.csv("zip.csv")
zip_data$MedianIncome[zip_data$ZIP == "44107"]
zip_data %>% filter(ZIP == "44107")
zip_data[zip_data$ZIP == "44107",]
zip_data = read.csv("zip.csv") %>% filter(!is.na(ZIP))
zip_data[zip_data$ZIP == "44107",]
zip_data[zip_data$ZIP == "44106",]
zip_data[zip_data$ZIP == "44100",]
zip_data[zip_data$ZIP == "44100",]$MedianIncome
is.na(zip_data[zip_data$ZIP == "44100",]$MedianIncome)
is.na(zip_data[zip_data$ZIP == "44100",]$MedianIncome)==T
zip_data[zip_data$ZIP == "44100",]$MedianIncome[1]
zip_data[zip_data$ZIP == "44107",]$MedianIncome[1]
"44100" %in%  zip_data$ZIP
"44107" %in%  zip_data$ZIP
any(is.na(zip_data))
names(zip_data)
any(is.na(tract_data))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
