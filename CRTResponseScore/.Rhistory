library(e1071)
# Train Naive Bayes model
trainDat <- read.csv(file="crt-score-training.csv", header=FALSE)
Xtrain <- trainDat[,c(1:12)]
Ytrain <- trainDat[,c(13)]
model <- naiveBayes(Xtrain, Ytrain)
model
# Standardization parameters
ef_mn <- 23.1075
ef_sd <- 9.0848
lvedd_mn <- 6.0675
lvedd_sd <- 1.0870
qrsd_mn <- 158.0184
qrsd_sd <- 28.8009
nyha_mn <- 2.8919
nyha_sd <- 0.4489
###### INPUT NEW DATA ####################################################################
# The following 9 variables are an example for what may be entered in the website.
# 1. QRS duration (continuous variable in milliseconds, infinite range)
qrsd_in_raw <-148
# 2. QRS morphology (categorical variable: one of four options: LBBB, RBBB, IVCD, or RV-paced)
morph_in <- "IVCD"
# 3. Left ventricular ejection fraction (continuous variable, 0-100)
ef_in_raw <- 5
# 4. NYHA heart failure classification (continuous variable, range 0-4)
nyha_in_raw <- 3
# 5. Gender (binary, True = male)
gender_in <- TRUE
# 6. Left ventricular end-diastolic diameter (continuous variable)
lvedd_in_raw <- 7
# 7. Ischemic etiology of cardiomyopathy (binary, True = ischemic, false = non-ischemic)
ICM_in <- TRUE
# 8. Atrial fibrillation (binary, true = yes, false = no)
AF_in <- FALSE
# 9. Placement of epicardial LV lead (binary, true = yes, false = no)
epi_in <- FALSE
############ FORMAT DATA #####################################################
# Standardize continuous variables by mean/standard deviation
ef_in <- (ef_in_raw - ef_mn)/ef_sd
qrsd_in <- (qrsd_in_raw - qrsd_mn)/qrsd_sd
nyha_in <- (nyha_in_raw - nyha_mn)/nyha_sd
lvedd_in <- (lvedd_in_raw - lvedd_mn)/lvedd_sd
# Convert categorical QRS morphology into binary variables
LBBB_in <- FALSE
RBBB_in <- FALSE
IVCD_in <- FALSE
PACE_in <- FALSE
if(morph_in == "LBBB")
LBBB_in <- TRUE
if(morph_in == "RBBB")
RBBB_in <- TRUE
if(morph_in == "IVCD")
IVCD_in <- TRUE
if(morph_in == "RV-paced")
PACE_in <- TRUE
############### RUN MODEL ####################################################################
Xtest <- data.frame(ICM_in, ef_in, lvedd_in, gender_in, qrsd_in, LBBB_in, PACE_in, RBBB_in, IVCD_in, AF_in, nyha_in, epi_in)
names(Xtest) <- c("V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9", "V10", "V11", "V12")
output <- predict(model,Xtest, type = "raw")
output
predict.naiveBayes
match(names(model$tables), names(testInheritedMethods()))
match(names(model$tables), names(table))
match(names(model$tables), names(test))
match(names(model$tables), names(Xtest))
seq_along(c(1,2,3,4,5,6,7))
Xtest[1]
Xtest[2]
Xtest[3]
attribs <- match(names(object$tables), names(newdata))
attribs <- match(names(model$tables), names(Xtest))
saveRDS(model, 'model')
readRDS('model')
model = readRDS('model')
# Standardization parameters
ef_mn <- 23.1075
ef_sd <- 9.0848
lvedd_mn <- 6.0675
lvedd_sd <- 1.0870
qrsd_mn <- 158.0184
qrsd_sd <- 28.8009
nyha_mn <- 2.8919
nyha_sd <- 0.4489
###### INPUT NEW DATA ####################################################################
# The following 9 variables are an example for what may be entered in the website.
# 1. QRS duration (continuous variable in milliseconds, infinite range)
qrsd_in_raw <-148
# 2. QRS morphology (categorical variable: one of four options: LBBB, RBBB, IVCD, or RV-paced)
morph_in <- "IVCD"
# 3. Left ventricular ejection fraction (continuous variable, 0-100)
ef_in_raw <- 5
# 4. NYHA heart failure classification (continuous variable, range 0-4)
nyha_in_raw <- 3
# 5. Gender (binary, True = male)
gender_in <- TRUE
# 6. Left ventricular end-diastolic diameter (continuous variable)
lvedd_in_raw <- 7
# 7. Ischemic etiology of cardiomyopathy (binary, True = ischemic, false = non-ischemic)
ICM_in <- TRUE
# 8. Atrial fibrillation (binary, true = yes, false = no)
AF_in <- FALSE
# 9. Placement of epicardial LV lead (binary, true = yes, false = no)
epi_in <- FALSE
############ FORMAT DATA #####################################################
# Standardize continuous variables by mean/standard deviation
ef_in <- (ef_in_raw - ef_mn)/ef_sd
qrsd_in <- (qrsd_in_raw - qrsd_mn)/qrsd_sd
nyha_in <- (nyha_in_raw - nyha_mn)/nyha_sd
lvedd_in <- (lvedd_in_raw - lvedd_mn)/lvedd_sd
# Convert categorical QRS morphology into binary variables
LBBB_in <- FALSE
RBBB_in <- FALSE
IVCD_in <- FALSE
PACE_in <- FALSE
if(morph_in == "LBBB")
LBBB_in <- TRUE
if(morph_in == "RBBB")
RBBB_in <- TRUE
if(morph_in == "IVCD")
IVCD_in <- TRUE
if(morph_in == "RV-paced")
PACE_in <- TRUE
############### RUN MODEL ####################################################################
Xtest <- data.frame(ICM_in, ef_in, lvedd_in, gender_in, qrsd_in, LBBB_in, PACE_in, RBBB_in, IVCD_in, AF_in, nyha_in, epi_in)
names(Xtest) <- c("V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9", "V10", "V11", "V12")
newdata = Xtest
attribs <- match(names(model$tables), names(newdata))
isnumeric <- sapply(newdata, is.numeric)
islogical <- sapply(newdata, is.logical)
newdata <- data.matrix(newdata)
attribs <- match(names(model$tables), names(newdata))
isnumeric <- sapply(newdata, is.numeric)
islogical <- sapply(newdata, is.logical)
newdata <- data.matrix(newdata)
L <- sapply(1:nrow(newdata), function(i) {
ndata <- newdata[i, ]
L <- log(object$apriori) + apply(log(sapply(seq_along(attribs),
function(v) {
nd <- ndata[attribs[v]]
if (is.na(nd)) rep(1, length(object$apriori)) else {
prob <- if (isnumeric[attribs[v]]) {
msd <- object$tables[[v]]
msd[, 2][msd[, 2] <= eps] <- threshold
dnorm(nd, msd[, 1], msd[, 2])
} else object$tables[[v]][, nd + islogical[attribs[v]]]
prob[prob <= eps] <- threshold
prob
}
})), 1, sum)
## Numerically unstable:
##            L <- exp(L)
##            L / sum(L)
## instead, we use:
sapply(L, function(lp) {
1/sum(exp(L - lp))
}
})
t(L)
attribs <- match(names(model$tables), names(newdata))
isnumeric <- sapply(newdata, is.numeric)
islogical <- sapply(newdata, is.logical)
newdata <- data.matrix(newdata)
L <- sapply(1:nrow(newdata), function(i) {
ndata <- newdata[i, ]
L <- log(object$apriori) + apply(log(sapply(seq_along(attribs),
function(v) {
nd <- ndata[attribs[v]]
if (is.na(nd)) rep(1, length(object$apriori)) else {
prob <- if (isnumeric[attribs[v]]) {
msd <- object$tables[[v]]
msd[, 2][msd[, 2] <= eps] <- threshold
dnorm(nd, msd[, 1], msd[, 2])
} else object$tables[[v]][, nd + islogical[attribs[v]]]
prob[prob <= eps] <- threshold
prob
}
})), 1, sum)
## Numerically unstable:
##            L <- exp(L)
##            L / sum(L)
## instead, we use:
sapply(L, function(lp) {
1/sum(exp(L - lp))
}
})
t(L)
attribs <- match(names(model$tables), names(newdata))
isnumeric <- sapply(newdata, is.numeric)
islogical <- sapply(newdata, is.logical)
newdata <- data.matrix(newdata)
L <- sapply(1:nrow(newdata), function(i) {
ndata <- newdata[i, ]
L <- log(object$apriori) + apply(log(sapply(seq_along(attribs),
function(v) {
nd <- ndata[attribs[v]]
if (is.na(nd)) rep(1, length(object$apriori)) else {
prob <- if (isnumeric[attribs[v]]) {
msd <- object$tables[[v]]
msd[, 2][msd[, 2] <= eps] <- threshold
dnorm(nd, msd[, 1], msd[, 2])
} else object$tables[[v]][, nd + islogical[attribs[v]]]
prob[prob <= eps] <- threshold
prob
}
})), 1, sum)
## Numerically unstable:
##            L <- exp(L)
##            L / sum(L)
## instead, we use:
sapply(L, function(lp) {
1/sum(exp(L - lp))
})
t(L)
attribs <- match(names(model$tables), names(newdata))
isnumeric <- sapply(newdata, is.numeric)
islogical <- sapply(newdata, is.logical)
newdata <- data.matrix(newdata)
L <- sapply(1:nrow(newdata), function(i) {
ndata <- newdata[i, ]
L <- log(model$apriori) + apply(log(sapply(seq_along(attribs),
function(v) {
nd <- ndata[attribs[v]]
if (is.na(nd)) rep(1, length(model$apriori)) else {
prob <- if (isnumeric[attribs[v]]) {
msd <- model$tables[[v]]
msd[, 2][msd[, 2] <= eps] <- threshold
dnorm(nd, msd[, 1], msd[, 2])
} else model$tables[[v]][, nd + islogical[attribs[v]]]
prob[prob <= eps] <- threshold
prob
}
})), 1, sum)
## Numerically unstable:
##            L <- exp(L)
##            L / sum(L)
## instead, we use:
sapply(L, function(lp) {
1/sum(exp(L - lp))
})
t(L)
library(e1071)
# Standardization parameters
ef_mn <- 23.1075
ef_sd <- 9.0848
lvedd_mn <- 6.0675
lvedd_sd <- 1.0870
qrsd_mn <- 158.0184
qrsd_sd <- 28.8009
nyha_mn <- 2.8919
nyha_sd <- 0.4489
# Train Naive Bayes model
trainDat <- read.csv(file="crt-score-training.csv", header=FALSE)
Xtrain <- trainDat[,c(1:12)]
Ytrain <- trainDat[,c(13)]
model <- naiveBayes(Xtrain, Ytrain)
###### INPUT NEW DATA ####################################################################
# The following 9 variables are an example for what may be entered in the website.
# 1. QRS duration (continuous variable in milliseconds, infinite range)
qrsd_in_raw <-148
# 2. QRS morphology (categorical variable: one of four options: LBBB, RBBB, IVCD, or RV-paced)
morph_in <- "IVCD"
# 3. Left ventricular ejection fraction (continuous variable, 0-100)
ef_in_raw <- 5
# 4. NYHA heart failure classification (continuous variable, range 0-4)
nyha_in_raw <- 3
# 5. Gender (binary, True = male)
gender_in <- TRUE
# 6. Left ventricular end-diastolic diameter (continuous variable)
lvedd_in_raw <- 7
# 7. Ischemic etiology of cardiomyopathy (binary, True = ischemic, false = non-ischemic)
ICM_in <- TRUE
# 8. Atrial fibrillation (binary, true = yes, false = no)
AF_in <- FALSE
# 9. Placement of epicardial LV lead (binary, true = yes, false = no)
epi_in <- FALSE
############ FORMAT DATA #####################################################
# Standardize continuous variables by mean/standard deviation
ef_in <- (ef_in_raw - ef_mn)/ef_sd
qrsd_in <- (qrsd_in_raw - qrsd_mn)/qrsd_sd
nyha_in <- (nyha_in_raw - nyha_mn)/nyha_sd
lvedd_in <- (lvedd_in_raw - lvedd_mn)/lvedd_sd
# Convert categorical QRS morphology into binary variables
LBBB_in <- FALSE
RBBB_in <- FALSE
IVCD_in <- FALSE
PACE_in <- FALSE
if(morph_in == "LBBB")
LBBB_in <- TRUE
if(morph_in == "RBBB")
RBBB_in <- TRUE
if(morph_in == "IVCD")
IVCD_in <- TRUE
if(morph_in == "RV-paced")
PACE_in <- TRUE
############### RUN MODEL ####################################################################
Xtest <- data.frame(ICM_in, ef_in, lvedd_in, gender_in, qrsd_in, LBBB_in, PACE_in, RBBB_in, IVCD_in, AF_in, nyha_in, epi_in)
names(Xtest) <- c("V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9", "V10", "V11", "V12")
output <- predict(model,Xtest, type = "raw")
# Final ouput score to display
response_score <- output[2]
response_score
Xtest
newdata
newdata =Xtest
attribs <- match(names(model$tables), names(newdata))
isnumeric <- sapply(newdata, is.numeric)
islogical <- sapply(newdata, is.logical)
newdata <- data.matrix(newdata)
L <- sapply(1:nrow(newdata), function(i) {
ndata <- newdata[i, ]
L <- log(model$apriori) + apply(log(sapply(seq_along(attribs),
function(v) {
nd <- ndata[attribs[v]]
if (is.na(nd)) rep(1, length(model$apriori)) else {
prob <- if (isnumeric[attribs[v]]) {
msd <- model$tables[[v]]
msd[, 2][msd[, 2] <= eps] <- threshold
dnorm(nd, msd[, 1], msd[, 2])
} else model$tables[[v]][, nd + islogical[attribs[v]]]
prob[prob <= eps] <- threshold
prob
}
})), 1, sum)
## Numerically unstable:
##            L <- exp(L)
##            L / sum(L)
## instead, we use:
sapply(L, function(lp) {
1/sum(exp(L - lp))
})
t(L)
threshold = 0.001
L <- sapply(1:nrow(newdata), function(i) {
ndata <- newdata[i, ]
L <- log(model$apriori) + apply(log(sapply(seq_along(attribs),
function(v) {
nd <- ndata[attribs[v]]
if (is.na(nd)) rep(1, length(model$apriori)) else {
prob <- if (isnumeric[attribs[v]]) {
msd <- model$tables[[v]]
msd[, 2][msd[, 2] <= eps] <- threshold
dnorm(nd, msd[, 1], msd[, 2])
} else model$tables[[v]][, nd + islogical[attribs[v]]]
prob[prob <= eps] <- threshold
prob
}
})), 1, sum)
## Numerically unstable:
##            L <- exp(L)
##            L / sum(L)
## instead, we use:
sapply(L, function(lp) {
1/sum(exp(L - lp))
})
t(L)
eps = 0
L <- sapply(1:nrow(newdata), function(i) {
ndata <- newdata[i, ]
L <- log(model$apriori) + apply(log(sapply(seq_along(attribs),
function(v) {
nd <- ndata[attribs[v]]
if (is.na(nd)) rep(1, length(model$apriori)) else {
prob <- if (isnumeric[attribs[v]]) {
msd <- model$tables[[v]]
msd[, 2][msd[, 2] <= eps] <- threshold
dnorm(nd, msd[, 1], msd[, 2])
} else model$tables[[v]][, nd + islogical[attribs[v]]]
prob[prob <= eps] <- threshold
prob
}
})), 1, sum)
## Numerically unstable:
##            L <- exp(L)
##            L / sum(L)
## instead, we use:
sapply(L, function(lp) {
1/sum(exp(L - lp))
})
t(L)
response_score
shiny::runApp()
## Code to compute CRT response score
# Albert Feeny, feenya@ccf.org
# Requires 'crt-score-training.csv' data to train the model
library(e1071)
# Standardization parameters
ef_mn <- 23.1075
ef_sd <- 9.0848
lvedd_mn <- 6.0675
lvedd_sd <- 1.0870
qrsd_mn <- 158.0184
qrsd_sd <- 28.8009
nyha_mn <- 2.8919
nyha_sd <- 0.4489
# Train Naive Bayes model
trainDat <- read.csv(file="crt-score-training.csv", header=FALSE)
Xtrain <- trainDat[,c(1:12)]
Ytrain <- trainDat[,c(13)]
model <- naiveBayes(Xtrain, Ytrain)
###### INPUT NEW DATA ####################################################################
# The following 9 variables are an example for what may be entered in the website.
# 1. QRS duration (continuous variable in milliseconds, infinite range)
qrsd_in_raw <-148
# 2. QRS morphology (categorical variable: one of four options: LBBB, RBBB, IVCD, or RV-paced)
morph_in <- "IVCD"
# 3. Left ventricular ejection fraction (continuous variable, 0-100)
ef_in_raw <- 5
# 4. NYHA heart failure classification (continuous variable, range 0-4)
nyha_in_raw <- 3
# 5. Gender (binary, True = male)
gender_in <- TRUE
# 6. Left ventricular end-diastolic diameter (continuous variable)
lvedd_in_raw <- 7
# 7. Ischemic etiology of cardiomyopathy (binary, True = ischemic, false = non-ischemic)
ICM_in <- TRUE
# 8. Atrial fibrillation (binary, true = yes, false = no)
AF_in <- FALSE
# 9. Placement of epicardial LV lead (binary, true = yes, false = no)
epi_in <- FALSE
############ FORMAT DATA #####################################################
# Standardize continuous variables by mean/standard deviation
ef_in <- (ef_in_raw - ef_mn)/ef_sd
qrsd_in <- (qrsd_in_raw - qrsd_mn)/qrsd_sd
nyha_in <- (nyha_in_raw - nyha_mn)/nyha_sd
lvedd_in <- (lvedd_in_raw - lvedd_mn)/lvedd_sd
# Convert categorical QRS morphology into binary variables
LBBB_in <- FALSE
RBBB_in <- FALSE
IVCD_in <- FALSE
PACE_in <- FALSE
if(morph_in == "LBBB")
LBBB_in <- TRUE
if(morph_in == "RBBB")
RBBB_in <- TRUE
if(morph_in == "IVCD")
IVCD_in <- TRUE
if(morph_in == "RV-paced")
PACE_in <- TRUE
############### RUN MODEL ####################################################################
Xtest <- data.frame(ICM_in, ef_in, lvedd_in, gender_in, qrsd_in, LBBB_in, PACE_in, RBBB_in, IVCD_in, AF_in, nyha_in, epi_in)
names(Xtest) <- c("V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9", "V10", "V11", "V12")
output <- predict(model,Xtest, type = "raw")
# Final ouput score to display
response_score <- output[2]
response_score
runApp()
1/(1+exp(-3))
sigmoid(-3)
exp(0.7)
exp(-0.7)
exp(-0.8)
exp(-0.68)
exp(-0.5)
exp(-0.3)
exp(-0.7062)
1-exp(-0.7056)
exp(-0.65)
exp(-0.7008)
exp(-0.7270)
log(0.5)
df <- tibble(
year   = c(2010, 2010, 2010, 2010, 2012, 2012, 2012),
qtr    = c(   1,    2,    3,    4,    1,    2,    3),
return = rnorm(7)
)
df %>% expand(year, qtr)
library(dplyr)
df <- tibble(
year   = c(2010, 2010, 2010, 2010, 2012, 2012, 2012),
qtr    = c(   1,    2,    3,    4,    1,    2,    3),
return = rnorm(7)
)
df %>% expand(year, qtr)
library(tidyr)
df <- tibble(
year   = c(2010, 2010, 2010, 2010, 2012, 2012, 2012),
qtr    = c(   1,    2,    3,    4,    1,    2,    3),
return = rnorm(7)
)
df %>% expand(year, qtr)
df %>% expand(year = full_seq(year, 1), qtr)
library(lubridate)
ymd('2015-12-31') - days(92)
ymd('2015-12-31') - days(91)
ymd('2015-03-31') - days(91)
ymd('2015-03-31') - days(89)
ymd('2015-06-30') - days(89)
ymd('2015-06-30') - days(90)
ymd('2015-09-30') - days(91)
log(0.5)
log(0.4)
exp(0.7738)
exp(-0.7738)
exp(-0.6436)
library(data.table)
library(readxl)
dx.codes.dat <- fread(file="H:/Project/Anita_hypoglycemic/AMisraHebert_Diagnoses amh rev 04 20 16.csv")
cv.code.9.dat <- dx.codes.dat %>% filter(Category == "Cardiovascular disease") %>% filter(VocabularyAbbreviation == "ICD9CM")
cv.code.10.dat <- read_excel(path = "H:/Project/Anita_hypoglycemic/AMisraHebert_Diagnoses amh rev 04 20 16 (003) new subset .xlsx", sheet = "CVD")
View(cv.code.9.dat)
