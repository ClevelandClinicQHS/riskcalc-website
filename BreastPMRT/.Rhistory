library(shiny)
runApp('/Volumes/jix/shiny_library/pmsamplesize')
runApp('/Volumes/jix/shiny_library/pmsamplesize')
runApp('/Volumes/jix/shiny_library/pmsamplesize')
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
covid = read.csv("/home/milinoa/COVID-19/COVID_19_PredictionTesting_Charlson_WithLabs_Diagnoses_20200320.csv")
install.packages("devtools")
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/4/rjags_4-4.tar.gz",
args="--configure-args='--with-jags-include=/Users/jix/brew/opt/jags/include/JAGS
--with-jags-lib=/Users/jix/brew/opt/jags/lib'
"
)
install.packages("rjags")
library(rjags)
library(JMbayes)
library("JMbayes")
library("lattice")
pbc2$status2 <- as.numeric(pbc2$status != "alive")
pbc2.id$status2 <- as.numeric(pbc2.id$status != "alive")
sfit <- survfit(Surv(years, status2) ~ drug, data = pbc2.id)
plot(sfit, lty = 1:2, lwd = 2, col = 1:2, mark.time = FALSE,
xlab = "Time (years)", ylab = "Transplantation-free Survival")
legend("topright", levels(pbc2.id$drug), lty = 1:2, col = 1:2, lwd = 2,
cex = 1.3, bty = "n")
pbc2$status2f <- factor(pbc2$status2, levels = 0:1,
labels = c("alive", "transplanted/dead"))
xyplot(log(serBilir) ~ year | status2f, group = id, data = pbc2,
panel = function(x, y, ...) {
panel.xyplot(x, y, type = "l", col = 1, ...)
panel.loess(x, y, col = 2, lwd = 2)
}, xlab = "Time (years)", ylab = "log(serum Bilirubin)")
lmeFit.pbc1 <- lme(log(serBilir) ~ ns(year, 2), data = pbc2,
random = ~ ns(year, 2) | id)
install.packages("splines2")
library(splines)
sfit <- survfit(Surv(years, status2) ~ drug, data = pbc2.id)
plot(sfit, lty = 1:2, lwd = 2, col = 1:2, mark.time = FALSE,
xlab = "Time (years)", ylab = "Transplantation-free Survival")
legend("topright", levels(pbc2.id$drug), lty = 1:2, col = 1:2, lwd = 2,
cex = 1.3, bty = "n")
pbc2$status2f <- factor(pbc2$status2, levels = 0:1,
labels = c("alive", "transplanted/dead"))
xyplot(log(serBilir) ~ year | status2f, group = id, data = pbc2,
panel = function(x, y, ...) {
panel.xyplot(x, y, type = "l", col = 1, ...)
panel.loess(x, y, col = 2, lwd = 2)
}, xlab = "Time (years)", ylab = "log(serum Bilirubin)")
lmeFit.pbc1 <- lme(log(serBilir) ~ ns(year, 2), data = pbc2,
random = ~ ns(year, 2) | id)
coxFit.pbc1 <- coxph(Surv(years, status2) ~ drug * age, data = pbc2.id, x = TRUE)
jointFit.pbc1 <- jointModelBayes(lmeFit.pbc1, coxFit.pbc1, timeVar = "year",
n.iter = 30000)
library(rms)
dat <- read_excel("Documents/Project/Copy of new version copy_071820.xlsx")
library(readxl)
dat <- read_excel("Documents/Project/Copy of new version copy_071820.xlsx")
names(dat)
View(dat)
dat <- read_excel("Documents/Project/Copy of new version copy_071820.xlsx", skip = 6)
names(dat)
paste("Col", 1:8, sep="", collapse = T)
paste("Col", 1:8, sep="")
names(dat) = paste("Col", 1:8, sep="")
names(dat)
fit = ols(Col3 ~ Col1 + Col2, data = dat)
str(dat)
fit = ols(Col4 ~ Col2 + Col3, data = dat)
val = validate(fit, method = "boot", B = 1000)
fit = ols(Col4 ~ Col2 + Col3, data = dat, x = T, y = T)
val = validate(fit, method = "boot", B = 1000)
val
fit
?ols
x1 <- runif(200)
x2 <- runif(200)
x3 <- runif(200)
x4 <- runif(200)
y <- x1 + x2 + rnorm(200)
f    <- ols(y ~ rcs(x1,4) + x2 + x3 + x4)
pred <- fitted(f)   # or predict(f) or f$linear.predictors
f2   <- ols(pred ~ rcs(x1,4) + x2 + x3 + x4, sigma=1)
f
f2
val = validate(f2, B=1000)
f2   <- ols(pred ~ rcs(x1,4) + x2 + x3 + x4, sigma=1, x=T, y=T)
val = validate(f2, B=1000)
val
f    <- ols(y ~ rcs(x1,4) + x2 + x3 + x4, x=T, y=T)
f    <- ols(y ~ rcs(x1,4) + x2 + x3 + x4, x=T, y=T)
val = validate(f, B=1000)
val
fit = ols(Col4 ~ Col2 + Col3, data = dat, x = T, y = T)
val = validate(fit, method = "boot", B = 1000)
fit
val
setwd("Documents/Project/shiny/BreastPMRT/")
load("any_rcr_fgr_shiny.rda")
save(any_rcr_fgr_shiny, file = "any_rcr_fgr_shiny.rda", version = 2)
load("bcm_fgr_shiny.rda")
save(bcm_fgr_shiny, file = "bcm_fgr_shiny.rda", version = 2)
load("dm_fgr_shiny.rda")
save(dm_fgr_shiny, file = "dm_fgr_shiny.rda", version = 2)
load("lr_fgr_shiny.rda")
save(lr_fgr_shiny, file = "lr_fgr_shiny.rda", version = 2)
shiny::runApp()
